# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../reqcontext.rst:4
msgid "The Request Context"
msgstr ""

#: ../../reqcontext.rst:6
msgid ""
"The request context keeps track of the request-level data during a "
"request. Rather than passing the request object to each function that "
"runs during a request, the :data:`request` and :data:`session` proxies "
"are accessed instead."
msgstr ""

#: ../../reqcontext.rst:11
msgid ""
"This is similar to :doc:`/appcontext`, which keeps track of the "
"application-level data independent of a request. A corresponding "
"application context is pushed when a request context is pushed."
msgstr ""

#: ../../reqcontext.rst:17
msgid "Purpose of the Context"
msgstr ""

#: ../../reqcontext.rst:19
msgid ""
"When the :class:`Flask` application handles a request, it creates a "
":class:`Request` object based on the environment it received from the "
"WSGI server. Because a *worker* (thread, process, or coroutine depending "
"on the server) handles only one request at a time, the request data can "
"be considered global to that worker during that request. Flask uses the "
"term *context local* for this."
msgstr ""

#: ../../reqcontext.rst:26
msgid ""
"Flask automatically *pushes* a request context when handling a request. "
"View functions, error handlers, and other functions that run during a "
"request will have access to the :data:`request` proxy, which points to "
"the request object for the current request."
msgstr ""

#: ../../reqcontext.rst:33
msgid "Lifetime of the Context"
msgstr ""

#: ../../reqcontext.rst:35
msgid ""
"When a Flask application begins handling a request, it pushes a request "
"context, which also pushes an :doc:`app context </appcontext>`. When the "
"request ends it pops the request context then the application context."
msgstr ""

#: ../../reqcontext.rst:39
msgid ""
"The context is unique to each thread (or other worker type). "
":data:`request` cannot be passed to another thread, the other thread has "
"a different context space and will not know about the request the parent "
"thread was pointing to."
msgstr ""

#: ../../reqcontext.rst:44
msgid ""
"Context locals are implemented using Python's :mod:`contextvars` and "
"Werkzeug's :class:`~werkzeug.local.LocalProxy`. Python manages the "
"lifetime of context vars automatically, and local proxy wraps that low-"
"level interface to make the data easier to work with."
msgstr ""

#: ../../reqcontext.rst:51
msgid "Manually Push a Context"
msgstr ""

#: ../../reqcontext.rst:53
msgid ""
"If you try to access :data:`request`, or anything that uses it, outside a"
" request context, you'll get this error message:"
msgstr ""

#: ../../reqcontext.rst:64
msgid ""
"This should typically only happen when testing code that expects an "
"active request. One option is to use the :meth:`test client "
"<Flask.test_client>` to simulate a full request. Or you can use "
":meth:`~Flask.test_request_context` in a ``with`` block, and everything "
"that runs in the block will have access to :data:`request`, populated "
"with your test data. ::"
msgstr ""

#: ../../reqcontext.rst:80
msgid ""
"If you see that error somewhere else in your code not related to testing,"
" it most likely indicates that you should move that code into a view "
"function."
msgstr ""

#: ../../reqcontext.rst:84
msgid ""
"For information on how to use the request context from the interactive "
"Python shell, see :doc:`/shell`."
msgstr ""

#: ../../reqcontext.rst:89
msgid "How the Context Works"
msgstr ""

#: ../../reqcontext.rst:91
msgid ""
"The :meth:`Flask.wsgi_app` method is called to handle each request. It "
"manages the contexts during the request. Internally, the request and "
"application contexts work like stacks. When contexts are pushed, the "
"proxies that depend on them are available and point at information from "
"the top item."
msgstr ""

#: ../../reqcontext.rst:97
msgid ""
"When the request starts, a :class:`~ctx.RequestContext` is created and "
"pushed, which creates and pushes an :class:`~ctx.AppContext` first if a "
"context for that application is not already the top context. While these "
"contexts are pushed, the :data:`current_app`, :data:`g`, :data:`request`,"
" and :data:`session` proxies are available to the original thread "
"handling the request."
msgstr ""

#: ../../reqcontext.rst:104
msgid ""
"Other contexts may be pushed to change the proxies during a request. "
"While this is not a common pattern, it can be used in advanced "
"applications to, for example, do internal redirects or chain different "
"applications together."
msgstr ""

#: ../../reqcontext.rst:109
msgid ""
"After the request is dispatched and a response is generated and sent, the"
" request context is popped, which then pops the application context. "
"Immediately before they are popped, the :meth:`~Flask.teardown_request` "
"and :meth:`~Flask.teardown_appcontext` functions are executed. These "
"execute even if an unhandled exception occurred during dispatch."
msgstr ""

#: ../../reqcontext.rst:119
msgid "Callbacks and Errors"
msgstr ""

#: ../../reqcontext.rst:121
msgid ""
"Flask dispatches a request in multiple stages which can affect the "
"request, response, and how errors are handled. The contexts are active "
"during all of these stages."
msgstr ""

#: ../../reqcontext.rst:125
msgid ""
"A :class:`Blueprint` can add handlers for these events that are specific "
"to the blueprint. The handlers for a blueprint will run if the blueprint "
"owns the route that matches the request."
msgstr ""

#: ../../reqcontext.rst:129
msgid ""
"Before each request, :meth:`~Flask.before_request` functions are called. "
"If one of these functions return a value, the other functions are "
"skipped. The return value is treated as the response and the view "
"function is not called."
msgstr ""

#: ../../reqcontext.rst:134
msgid ""
"If the :meth:`~Flask.before_request` functions did not return a response,"
" the view function for the matched route is called and returns a "
"response."
msgstr ""

#: ../../reqcontext.rst:138
msgid ""
"The return value of the view is converted into an actual response object "
"and passed to the :meth:`~Flask.after_request` functions. Each function "
"returns a modified or new response object."
msgstr ""

#: ../../reqcontext.rst:142
msgid ""
"After the response is returned, the contexts are popped, which calls the "
":meth:`~Flask.teardown_request` and :meth:`~Flask.teardown_appcontext` "
"functions. These functions are called even if an unhandled exception was "
"raised at any point above."
msgstr ""

#: ../../reqcontext.rst:147
msgid ""
"If an exception is raised before the teardown functions, Flask tries to "
"match it with an :meth:`~Flask.errorhandler` function to handle the "
"exception and return a response. If no error handler is found, or the "
"handler itself raises an exception, Flask returns a generic ``500 "
"Internal Server Error`` response. The teardown functions are still "
"called, and are passed the exception object."
msgstr ""

#: ../../reqcontext.rst:154
msgid ""
"If debug mode is enabled, unhandled exceptions are not converted to a "
"``500`` response and instead are propagated to the WSGI server. This "
"allows the development server to present the interactive debugger with "
"the traceback."
msgstr ""

#: ../../reqcontext.rst:161
msgid "Teardown Callbacks"
msgstr ""

#: ../../reqcontext.rst:163
msgid ""
"The teardown callbacks are independent of the request dispatch, and are "
"instead called by the contexts when they are popped. The functions are "
"called even if there is an unhandled exception during dispatch, and for "
"manually pushed contexts. This means there is no guarantee that any other"
" parts of the request dispatch have run first. Be sure to write these "
"functions in a way that does not depend on other callbacks and will not "
"fail."
msgstr ""

#: ../../reqcontext.rst:171
msgid ""
"During testing, it can be useful to defer popping the contexts after the "
"request ends, so that their data can be accessed in the test function. "
"Use the :meth:`~Flask.test_client` as a ``with`` block to preserve the "
"contexts until the ``with`` block exits."
msgstr ""

#: ../../reqcontext.rst:205
msgid "Signals"
msgstr ""

#: ../../reqcontext.rst:207
msgid "The following signals are sent:"
msgstr ""

#: ../../reqcontext.rst:209
msgid ""
":data:`request_started` is sent before the :meth:`~Flask.before_request` "
"functions are called."
msgstr ""

#: ../../reqcontext.rst:211
msgid ""
":data:`request_finished` is sent after the :meth:`~Flask.after_request` "
"functions are called."
msgstr ""

#: ../../reqcontext.rst:213
msgid ""
":data:`got_request_exception` is sent when an exception begins to be "
"handled, but before an :meth:`~Flask.errorhandler` is looked up or "
"called."
msgstr ""

#: ../../reqcontext.rst:215
msgid ""
":data:`request_tearing_down` is sent after the "
":meth:`~Flask.teardown_request` functions are called."
msgstr ""

#: ../../reqcontext.rst:222
msgid "Notes On Proxies"
msgstr ""

#: ../../reqcontext.rst:224
msgid ""
"Some of the objects provided by Flask are proxies to other objects. The "
"proxies are accessed in the same way for each worker thread, but point to"
" the unique object bound to each worker behind the scenes as described on"
" this page."
msgstr ""

#: ../../reqcontext.rst:229
msgid ""
"Most of the time you don't have to care about that, but there are some "
"exceptions where it is good to know that this object is actually a proxy:"
msgstr ""

#: ../../reqcontext.rst:232
msgid ""
"The proxy objects cannot fake their type as the actual object types. If "
"you want to perform instance checks, you have to do that on the object "
"being proxied."
msgstr ""

#: ../../reqcontext.rst:235
msgid ""
"The reference to the proxied object is needed in some situations, such as"
" sending :doc:`signals` or passing data to a background thread."
msgstr ""

#: ../../reqcontext.rst:239
msgid ""
"If you need to access the underlying object that is proxied, use the "
":meth:`~werkzeug.local.LocalProxy._get_current_object` method::"
msgstr ""
