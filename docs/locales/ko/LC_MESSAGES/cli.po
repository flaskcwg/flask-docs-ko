# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../cli.rst:4
msgid "Command Line Interface"
msgstr ""

#: ../../cli.rst:6
msgid ""
"Installing Flask installs the ``flask`` script, a `Click`_ command line "
"interface, in your virtualenv. Executed from the terminal, this script "
"gives access to built-in, extension, and application-defined commands. "
"The ``--help`` option will give more information about any commands and "
"options."
msgstr ""

#: ../../cli.rst:15
msgid "Application Discovery"
msgstr ""

#: ../../cli.rst:17
msgid ""
"The ``flask`` command is installed by Flask, not your application; it "
"must be told where to find your application in order to use it. The "
"``--app`` option is used to specify how to load the application."
msgstr ""

#: ../../cli.rst:21
msgid ""
"While ``--app`` supports a variety of options for specifying your "
"application, most use cases should be simple. Here are the typical "
"values:"
msgstr ""

#: ../../cli.rst:27
msgid "(nothing)"
msgstr ""

#: ../../cli.rst:25
msgid ""
"The name \"app\" or \"wsgi\" is imported (as a \".py\" file, or package),"
" automatically detecting an app (``app`` or ``application``) or factory "
"(``create_app`` or ``make_app``)."
msgstr ""

#: ../../cli.rst:31
msgid "``--app hello``"
msgstr ""

#: ../../cli.rst:30
msgid ""
"The given name is imported, automatically detecting an app (``app`` or "
"``application``) or factory (``create_app`` or ``make_app``)."
msgstr ""

#: ../../cli.rst:35
msgid ""
"``--app`` has three parts: an optional path that sets the current working"
" directory, a Python file or dotted import path, and an optional variable"
" name of the instance or factory. If the name is a factory, it can "
"optionally be followed by arguments in parentheses. The following values "
"demonstrate these parts:"
msgstr ""

#: ../../cli.rst:42
msgid "``--app src/hello``"
msgstr ""

#: ../../cli.rst:42
msgid "Sets the current working directory to ``src`` then imports ``hello``."
msgstr ""

#: ../../cli.rst:45
msgid "``--app hello.web``"
msgstr ""

#: ../../cli.rst:45
msgid "Imports the path ``hello.web``."
msgstr ""

#: ../../cli.rst:48
msgid "``--app hello:app2``"
msgstr ""

#: ../../cli.rst:48
msgid "Uses the ``app2`` Flask instance in ``hello``."
msgstr ""

#: ../../cli.rst:52
msgid "``--app 'hello:create_app(\"dev\")'``"
msgstr ""

#: ../../cli.rst:51
msgid ""
"The ``create_app`` factory in ``hello`` is called with the string "
"``'dev'`` as the argument."
msgstr ""

#: ../../cli.rst:54
msgid ""
"If ``--app`` is not set, the command will try to import \"app\" or "
"\"wsgi\" (as a \".py\" file, or package) and try to detect an application"
" instance or factory."
msgstr ""

#: ../../cli.rst:58
msgid ""
"Within the given import, the command looks for an application instance "
"named ``app`` or ``application``, then any application instance. If no "
"instance is found, the command looks for a factory function named "
"``create_app`` or ``make_app`` that returns an instance."
msgstr ""

#: ../../cli.rst:63
msgid ""
"If parentheses follow the factory name, their contents are parsed as "
"Python literals and passed as arguments and keyword arguments to the "
"function. This means that strings must still be in quotes."
msgstr ""

#: ../../cli.rst:69
msgid "Run the Development Server"
msgstr ""

#: ../../cli.rst:71
msgid ""
"The :func:`run <cli.run_command>` command will start the development "
"server. It replaces the :meth:`Flask.run` method in most cases. ::"
msgstr ""

#: ../../cli.rst:78
msgid ""
"Do not use this command to run your application in production. Only use "
"the development server during development. The development server is "
"provided for convenience, but is not designed to be particularly secure, "
"stable, or efficient. See :doc:`/deploying/index` for how to run in "
"production."
msgstr ""

#: ../../cli.rst:83
msgid ""
"If another program is already using port 5000, you'll see ``OSError: "
"[Errno 98]`` or ``OSError: [WinError 10013]`` when the server tries to "
"start. See :ref:`address-already-in-use` for how to handle that."
msgstr ""

#: ../../cli.rst:90
msgid "Debug Mode"
msgstr ""

#: ../../cli.rst:92
msgid ""
"In debug mode, the ``flask run`` command will enable the interactive "
"debugger and the reloader by default, and make errors easier to see and "
"debug. To enable debug mode, use the ``--debug`` option."
msgstr ""

#: ../../cli.rst:106
msgid ""
"The ``--debug`` option can also be passed to the top level ``flask`` "
"command to enable debug mode for any command. The following two ``run`` "
"calls are equivalent."
msgstr ""

#: ../../cli.rst:116
msgid "Watch and Ignore Files with the Reloader"
msgstr ""

#: ../../cli.rst:118
msgid ""
"When using debug mode, the reloader will trigger whenever your Python "
"code or imported modules change. The reloader can watch additional files "
"with the ``--extra-files`` option. Multiple paths are separated with "
"``:``, or ``;`` on Windows."
msgstr ""

#: ../../cli.rst:128
msgid ""
"The reloader can also ignore files using :mod:`fnmatch` patterns with the"
" ``--exclude-patterns`` option. Multiple patterns are separated with "
"``:``, or ``;`` on Windows."
msgstr ""

#: ../../cli.rst:134
msgid "Open a Shell"
msgstr ""

#: ../../cli.rst:136
msgid ""
"To explore the data in your application, you can start an interactive "
"Python shell with the :func:`shell <cli.shell_command>` command. An "
"application context will be active, and the app instance will be "
"imported. ::"
msgstr ""

#: ../../cli.rst:146
msgid "Use :meth:`~Flask.shell_context_processor` to add other automatic imports."
msgstr ""

#: ../../cli.rst:152
msgid "Environment Variables From dotenv"
msgstr ""

#: ../../cli.rst:154
msgid ""
"The ``flask`` command supports setting any option for any command with "
"environment variables. The variables are named like ``FLASK_OPTION`` or "
"``FLASK_COMMAND_OPTION``, for example ``FLASK_APP`` or "
"``FLASK_RUN_PORT``."
msgstr ""

#: ../../cli.rst:159
msgid ""
"Rather than passing options every time you run a command, or environment "
"variables every time you open a new terminal, you can use Flask's dotenv "
"support to set environment variables automatically."
msgstr ""

#: ../../cli.rst:163
msgid ""
"If `python-dotenv`_ is installed, running the ``flask`` command will set "
"environment variables defined in the files ``.env`` and ``.flaskenv``. "
"You can also specify an extra file to load with the ``--env-file`` "
"option. Dotenv files can be used to avoid having to set ``--app`` or "
"``FLASK_APP`` manually, and to set configuration using environment "
"variables similar to how some deployment services work."
msgstr ""

#: ../../cli.rst:170
msgid ""
"Variables set on the command line are used over those set in "
":file:`.env`, which are used over those set in :file:`.flaskenv`. "
":file:`.flaskenv` should be used for public variables, such as "
"``FLASK_APP``, while :file:`.env` should not be committed to your "
"repository so that it can set private variables."
msgstr ""

#: ../../cli.rst:175
msgid ""
"Directories are scanned upwards from the directory you call ``flask`` "
"from to locate the files."
msgstr ""

#: ../../cli.rst:178
msgid ""
"The files are only loaded by the ``flask`` command or calling "
":meth:`~Flask.run`. If you would like to load these files when running in"
" production, you should call :func:`~cli.load_dotenv` manually."
msgstr ""

#: ../../cli.rst:186
msgid "Setting Command Options"
msgstr ""

#: ../../cli.rst:188
msgid ""
"Click is configured to load default values for command options from "
"environment variables. The variables use the pattern "
"``FLASK_COMMAND_OPTION``. For example, to set the port for the run "
"command, instead of ``flask run --port 8000``:"
msgstr ""

#: ../../cli.rst:195 ../../cli.rst:251 ../../cli.rst:289
msgid "Bash"
msgstr ""

#: ../../cli.rst:203 ../../cli.rst:258 ../../cli.rst:295
msgid "Fish"
msgstr ""

#: ../../cli.rst:211 ../../cli.rst:265 ../../cli.rst:301
msgid "CMD"
msgstr ""

#: ../../cli.rst:219 ../../cli.rst:272 ../../cli.rst:307
msgid "Powershell"
msgstr ""

#: ../../cli.rst:227
msgid ""
"These can be added to the ``.flaskenv`` file just like ``FLASK_APP`` to "
"control default command options."
msgstr ""

#: ../../cli.rst:232
msgid "Disable dotenv"
msgstr ""

#: ../../cli.rst:234
msgid ""
"The ``flask`` command will show a message if it detects dotenv files but "
"python-dotenv is not installed."
msgstr ""

#: ../../cli.rst:242
msgid ""
"You can tell Flask not to load dotenv files even when python-dotenv is "
"installed by setting the ``FLASK_SKIP_DOTENV`` environment variable. This"
" can be useful if you want to load them manually, or if you're using a "
"project runner that loads them already. Keep in mind that the environment"
" variables must be set before the app loads or it won't configure as "
"expected."
msgstr ""

#: ../../cli.rst:281
msgid "Environment Variables From virtualenv"
msgstr ""

#: ../../cli.rst:283
msgid ""
"If you do not want to install dotenv support, you can still set "
"environment variables by adding them to the end of the virtualenv's "
":file:`activate` script. Activating the virtualenv will set the "
"variables."
msgstr ""

#: ../../cli.rst:291
msgid "Unix Bash, :file:`.venv/bin/activate`::"
msgstr ""

#: ../../cli.rst:297
msgid "Fish, :file:`.venv/bin/activate.fish`::"
msgstr ""

#: ../../cli.rst:303
msgid "Windows CMD, :file:`.venv\\\\Scripts\\\\activate.bat`::"
msgstr ""

#: ../../cli.rst:309
msgid "Windows Powershell, :file:`.venv\\\\Scripts\\\\activate.ps1`::"
msgstr ""

#: ../../cli.rst:313
msgid ""
"It is preferred to use dotenv support over this, since :file:`.flaskenv` "
"can be committed to the repository so that it works automatically "
"wherever the project is checked out."
msgstr ""

#: ../../cli.rst:319
msgid "Custom Commands"
msgstr ""

#: ../../cli.rst:321
msgid ""
"The ``flask`` command is implemented using `Click`_. See that project's "
"documentation for full information about writing commands."
msgstr ""

#: ../../cli.rst:324
msgid ""
"This example adds the command ``create-user`` that takes the argument "
"``name``. ::"
msgstr ""

#: ../../cli.rst:341
msgid ""
"This example adds the same command, but as ``user create``, a command in "
"a group. This is useful if you want to organize multiple related "
"commands. ::"
msgstr ""

#: ../../cli.rst:362
msgid ""
"See :ref:`testing-cli` for an overview of how to test your custom "
"commands."
msgstr ""

#: ../../cli.rst:367
msgid "Registering Commands with Blueprints"
msgstr ""

#: ../../cli.rst:369
msgid ""
"If your application uses blueprints, you can optionally register CLI "
"commands directly onto them. When your blueprint is registered onto your "
"application, the associated commands will be available to the ``flask`` "
"command. By default, those commands will be nested in a group matching "
"the name of the blueprint."
msgstr ""

#: ../../cli.rst:392
msgid ""
"You can alter the group name by specifying the ``cli_group`` parameter "
"when creating the :class:`Blueprint` object, or later with "
":meth:`app.register_blueprint(bp, cli_group='...') "
"<Flask.register_blueprint>`. The following are equivalent:"
msgstr ""

#: ../../cli.rst:407
msgid ""
"Specifying ``cli_group=None`` will remove the nesting and merge the "
"commands directly to the application's level:"
msgstr ""

#: ../../cli.rst:422
msgid "Application Context"
msgstr ""

#: ../../cli.rst:424
msgid ""
"Commands added using the Flask app's :attr:`~Flask.cli` or "
":class:`~flask.cli.FlaskGroup` :meth:`~cli.AppGroup.command` decorator "
"will be executed with an application context pushed, so your custom "
"commands and parameters have access to the app and its configuration. The"
" :func:`~cli.with_appcontext` decorator can be used to get the same "
"behavior, but is not needed in most cases."
msgstr ""

#: ../../cli.rst:445
msgid "Plugins"
msgstr ""

#: ../../cli.rst:447
msgid ""
"Flask will automatically load commands specified in the "
"``flask.commands`` `entry point`_. This is useful for extensions that "
"want to add commands when they are installed. Entry points are specified "
"in :file:`pyproject.toml`:"
msgstr ""

#: ../../cli.rst:458
msgid ""
"Inside :file:`my_extension/commands.py` you can then export a Click "
"object::"
msgstr ""

#: ../../cli.rst:467
msgid ""
"Once that package is installed in the same virtualenv as your Flask "
"project, you can run ``flask my-command`` to invoke the command."
msgstr ""

#: ../../cli.rst:474
msgid "Custom Scripts"
msgstr ""

#: ../../cli.rst:476
msgid ""
"When you are using the app factory pattern, it may be more convenient to "
"define your own Click script. Instead of using ``--app`` and letting "
"Flask load your application, you can create your own Click object and "
"export it as a `console script`_ entry point."
msgstr ""

#: ../../cli.rst:481
msgid "Create an instance of :class:`~cli.FlaskGroup` and pass it the factory::"
msgstr ""

#: ../../cli.rst:496
msgid "Define the entry point in :file:`pyproject.toml`:"
msgstr ""

#: ../../cli.rst:503
msgid ""
"Install the application in the virtualenv in editable mode and the custom"
" script is available. Note that you don't need to set ``--app``. ::"
msgstr ""

#: ../../cli.rst:509
msgid "Errors in Custom Scripts"
msgstr ""

#: ../../cli.rst:511
msgid ""
"When using a custom script, if you introduce an error in your module-"
"level code, the reloader will fail because it can no longer load the "
"entry point."
msgstr ""

#: ../../cli.rst:515
msgid ""
"The ``flask`` command, being separate from your code, does not have this "
"issue and is recommended in most cases."
msgstr ""

#: ../../cli.rst:522
msgid "PyCharm Integration"
msgstr ""

#: ../../cli.rst:524
msgid ""
"PyCharm Professional provides a special Flask run configuration to run "
"the development server. For the Community Edition, and for other commands"
" besides ``run``, you need to create a custom run configuration. These "
"instructions should be similar for any other IDE you use."
msgstr ""

#: ../../cli.rst:529
msgid ""
"In PyCharm, with your project open, click on *Run* from the menu bar and "
"go to *Edit Configurations*. You'll see a screen similar to this:"
msgstr ""

#: ../../cli.rst:-1
msgid "Screenshot of PyCharm run configuration."
msgstr ""

#: ../../cli.rst:537
msgid ""
"Once you create a configuration for the ``flask run``, you can copy and "
"change it to call any other command."
msgstr ""

#: ../../cli.rst:540
msgid ""
"Click the *+ (Add New Configuration)* button and select *Python*. Give "
"the configuration a name such as \"flask run\"."
msgstr ""

#: ../../cli.rst:543
msgid ""
"Click the *Script path* dropdown and change it to *Module name*, then "
"input ``flask``."
msgstr ""

#: ../../cli.rst:545
msgid ""
"The *Parameters* field is set to the CLI command to execute along with "
"any arguments. This example uses ``--app hello run --debug``, which will "
"run the development server in debug mode. ``--app hello`` should be the "
"import or file with your Flask app."
msgstr ""

#: ../../cli.rst:549
msgid ""
"If you installed your project as a package in your virtualenv, you may "
"uncheck the *PYTHONPATH* options. This will more accurately match how you"
" deploy later."
msgstr ""

#: ../../cli.rst:552
msgid ""
"Click *OK* to save and close the configuration. Select the configuration "
"in the main PyCharm window and click the play button next to it to run "
"the server."
msgstr ""

#: ../../cli.rst:555
msgid ""
"Now that you have a configuration for ``flask run``, you can copy that "
"configuration and change the *Parameters* argument to run a different CLI"
" command."
msgstr ""
