# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../errorhandling.rst:2
msgid "Handling Application Errors"
msgstr ""

#: ../../errorhandling.rst:4
#, python-format
msgid ""
"Applications fail, servers fail. Sooner or later you will see an "
"exception in production. Even if your code is 100% correct, you will "
"still see exceptions from time to time. Why? Because everything else "
"involved will fail. Here are some situations where perfectly fine code "
"can lead to server errors:"
msgstr ""

#: ../../errorhandling.rst:10
msgid ""
"the client terminated the request early and the application was still "
"reading from the incoming data"
msgstr ""

#: ../../errorhandling.rst:12
msgid "the database server was overloaded and could not handle the query"
msgstr ""

#: ../../errorhandling.rst:13
msgid "a filesystem is full"
msgstr ""

#: ../../errorhandling.rst:14
msgid "a harddrive crashed"
msgstr ""

#: ../../errorhandling.rst:15
msgid "a backend server overloaded"
msgstr ""

#: ../../errorhandling.rst:16
msgid "a programming error in a library you are using"
msgstr ""

#: ../../errorhandling.rst:17
msgid "network connection of the server to another system failed"
msgstr ""

#: ../../errorhandling.rst:19
msgid ""
"And that's just a small sample of issues you could be facing. So how do "
"we deal with that sort of problem? By default if your application runs in"
" production mode, and an exception is raised Flask will display a very "
"simple page for you and log the exception to the "
":attr:`~flask.Flask.logger`."
msgstr ""

#: ../../errorhandling.rst:24
msgid ""
"But there is more you can do, and we will cover some better setups to "
"deal with errors including custom exceptions and 3rd party tools."
msgstr ""

#: ../../errorhandling.rst:31
msgid "Error Logging Tools"
msgstr ""

#: ../../errorhandling.rst:33
msgid ""
"Sending error mails, even if just for critical ones, can become "
"overwhelming if enough users are hitting the error and log files are "
"typically never looked at. This is why we recommend using `Sentry "
"<https://sentry.io/>`_ for dealing with application errors. It's "
"available as a source-available project `on GitHub "
"<https://github.com/getsentry/sentry>`_ and is also available as a "
"`hosted version <https://sentry.io/signup/>`_ which you can try for free."
" Sentry aggregates duplicate errors, captures the full stack trace and "
"local variables for debugging, and sends you mails based on new errors or"
" frequency thresholds."
msgstr ""

#: ../../errorhandling.rst:44
msgid ""
"To use Sentry you need to install the ``sentry-sdk`` client with extra "
"``flask`` dependencies."
msgstr ""

#: ../../errorhandling.rst:51
msgid "And then add this to your Flask app:"
msgstr ""

#: ../../errorhandling.rst:60
msgid ""
"The ``YOUR_DSN_HERE`` value needs to be replaced with the DSN value you "
"get from your Sentry installation."
msgstr ""

#: ../../errorhandling.rst:63
msgid ""
"After installation, failures leading to an Internal Server Error are "
"automatically reported to Sentry and from there you can receive error "
"notifications."
msgstr ""

#: ../../errorhandling.rst:67
msgid "See also:"
msgstr ""

#: ../../errorhandling.rst:69
msgid ""
"Sentry also supports catching errors from a worker queue (RQ, Celery, "
"etc.) in a similar fashion. See the `Python SDK docs "
"<https://docs.sentry.io/platforms/python/>`__ for more information."
msgstr ""

#: ../../errorhandling.rst:72
msgid ""
"`Flask-specific documentation "
"<https://docs.sentry.io/platforms/python/guides/flask/>`__"
msgstr ""

#: ../../errorhandling.rst:76
msgid "Error Handlers"
msgstr ""

#: ../../errorhandling.rst:78
msgid ""
"When an error occurs in Flask, an appropriate `HTTP status code "
"<https://developer.mozilla.org/en-US/docs/Web/HTTP/Status>`__ will be "
"returned. 400-499 indicate errors with the client's request data, or "
"about the data requested. 500-599 indicate errors with the server or "
"application itself."
msgstr ""

#: ../../errorhandling.rst:84
msgid ""
"You might want to show custom error pages to the user when an error "
"occurs. This can be done by registering error handlers."
msgstr ""

#: ../../errorhandling.rst:87
msgid ""
"An error handler is a function that returns a response when a type of "
"error is raised, similar to how a view is a function that returns a "
"response when a request URL is matched. It is passed the instance of the "
"error being handled, which is most likely a "
":exc:`~werkzeug.exceptions.HTTPException`."
msgstr ""

#: ../../errorhandling.rst:92
msgid ""
"The status code of the response will not be set to the handler's code. "
"Make sure to provide the appropriate HTTP status code when returning a "
"response from a handler."
msgstr ""

#: ../../errorhandling.rst:98
msgid "Registering"
msgstr ""

#: ../../errorhandling.rst:100
msgid ""
"Register handlers by decorating a function with "
":meth:`~flask.Flask.errorhandler`. Or use "
":meth:`~flask.Flask.register_error_handler` to register the function "
"later. Remember to set the error code when returning the response."
msgstr ""

#: ../../errorhandling.rst:114
msgid ""
":exc:`werkzeug.exceptions.HTTPException` subclasses like "
":exc:`~werkzeug.exceptions.BadRequest` and their HTTP codes are "
"interchangeable when registering handlers. (``BadRequest.code == 400``)"
msgstr ""

#: ../../errorhandling.rst:118
msgid ""
"Non-standard HTTP codes cannot be registered by code because they are not"
" known by Werkzeug. Instead, define a subclass of "
":class:`~werkzeug.exceptions.HTTPException` with the appropriate code and"
" register and raise that exception class."
msgstr ""

#: ../../errorhandling.rst:133
msgid ""
"Handlers can be registered for any exception class, not just "
":exc:`~werkzeug.exceptions.HTTPException` subclasses or HTTP status "
"codes. Handlers can be registered for a specific class, or for all "
"subclasses of a parent class."
msgstr ""

#: ../../errorhandling.rst:140
msgid "Handling"
msgstr ""

#: ../../errorhandling.rst:142
msgid ""
"When building a Flask application you *will* run into exceptions. If some"
" part of your code breaks while handling a request (and you have no error"
" handlers registered), a \"500 Internal Server Error\" "
"(:exc:`~werkzeug.exceptions.InternalServerError`) will be returned by "
"default. Similarly, \"404 Not Found\" "
"(:exc:`~werkzeug.exceptions.NotFound`) error will occur if a request is "
"sent to an unregistered route. If a route receives an unallowed request "
"method, a \"405 Method Not Allowed\" "
"(:exc:`~werkzeug.exceptions.MethodNotAllowed`) will be raised. These are "
"all subclasses of :class:`~werkzeug.exceptions.HTTPException` and are "
"provided by default in Flask."
msgstr ""

#: ../../errorhandling.rst:153
msgid ""
"Flask gives you the ability to raise any HTTP exception registered by "
"Werkzeug. However, the default HTTP exceptions return simple exception "
"pages. You might want to show custom error pages to the user when an "
"error occurs. This can be done by registering error handlers."
msgstr ""

#: ../../errorhandling.rst:158
msgid ""
"When Flask catches an exception while handling a request, it is first "
"looked up by code. If no handler is registered for the code, Flask looks "
"up the error by its class hierarchy; the most specific handler is chosen."
" If no handler is registered, :class:`~werkzeug.exceptions.HTTPException`"
" subclasses show a generic message about their code, while other "
"exceptions are converted to a generic \"500 Internal Server Error\"."
msgstr ""

#: ../../errorhandling.rst:164
msgid ""
"For example, if an instance of :exc:`ConnectionRefusedError` is raised, "
"and a handler is registered for :exc:`ConnectionError` and "
":exc:`ConnectionRefusedError`, the more specific "
":exc:`ConnectionRefusedError` handler is called with the exception "
"instance to generate the response."
msgstr ""

#: ../../errorhandling.rst:169
msgid ""
"Handlers registered on the blueprint take precedence over those "
"registered globally on the application, assuming a blueprint is handling "
"the request that raises the exception. However, the blueprint cannot "
"handle 404 routing errors because the 404 occurs at the routing level "
"before the blueprint can be determined."
msgstr ""

#: ../../errorhandling.rst:177
msgid "Generic Exception Handlers"
msgstr ""

#: ../../errorhandling.rst:179
msgid ""
"It is possible to register error handlers for very generic base classes "
"such as ``HTTPException`` or even ``Exception``. However, be aware that "
"these will catch more than you might expect."
msgstr ""

#: ../../errorhandling.rst:183
msgid ""
"For example, an error handler for ``HTTPException`` might be useful for "
"turning the default HTML errors pages into JSON. However, this handler "
"will trigger for things you don't cause directly, such as 404 and 405 "
"errors during routing. Be sure to craft your handler carefully so you "
"don't lose information about the HTTP error."
msgstr ""

#: ../../errorhandling.rst:208
msgid ""
"An error handler for ``Exception`` might seem useful for changing how all"
" errors, even unhandled ones, are presented to the user. However, this is"
" similar to doing ``except Exception:`` in Python, it will capture *all* "
"otherwise unhandled errors, including all HTTP status codes."
msgstr ""

#: ../../errorhandling.rst:214
msgid ""
"In most cases it will be safer to register handlers for more specific "
"exceptions. Since ``HTTPException`` instances are valid WSGI responses, "
"you could also pass them through directly."
msgstr ""

#: ../../errorhandling.rst:231
msgid ""
"Error handlers still respect the exception class hierarchy. If you "
"register handlers for both ``HTTPException`` and ``Exception``, the "
"``Exception`` handler will not handle ``HTTPException`` subclasses "
"because the ``HTTPException`` handler is more specific."
msgstr ""

#: ../../errorhandling.rst:238
msgid "Unhandled Exceptions"
msgstr ""

#: ../../errorhandling.rst:240
msgid ""
"When there is no error handler registered for an exception, a 500 "
"Internal Server Error will be returned instead. See "
":meth:`flask.Flask.handle_exception` for information about this behavior."
msgstr ""

#: ../../errorhandling.rst:245
msgid ""
"If there is an error handler registered for ``InternalServerError``, this"
" will be invoked. As of Flask 1.1.0, this error handler will always be "
"passed an instance of ``InternalServerError``, not the original unhandled"
" error."
msgstr ""

#: ../../errorhandling.rst:250
msgid "The original error is available as ``e.original_exception``."
msgstr ""

#: ../../errorhandling.rst:252
msgid ""
"An error handler for \"500 Internal Server Error\" will be passed "
"uncaught exceptions in addition to explicit 500 errors. In debug mode, a "
"handler for \"500 Internal Server Error\" will not be used. Instead, the "
"interactive debugger will be shown."
msgstr ""

#: ../../errorhandling.rst:259
msgid "Custom Error Pages"
msgstr ""

#: ../../errorhandling.rst:261
msgid ""
"Sometimes when building a Flask application, you might want to raise a "
":exc:`~werkzeug.exceptions.HTTPException` to signal to the user that "
"something is wrong with the request. Fortunately, Flask comes with a "
"handy :func:`~flask.abort` function that aborts a request with a HTTP "
"error from werkzeug as desired. It will also provide a plain black and "
"white error page for you with a basic description, but nothing fancy."
msgstr ""

#: ../../errorhandling.rst:268
msgid ""
"Depending on the error code it is less or more likely for the user to "
"actually see such an error."
msgstr ""

#: ../../errorhandling.rst:271
msgid ""
"Consider the code below, we might have a user profile route, and if the "
"user fails to pass a username we can raise a \"400 Bad Request\". If the "
"user passes a username and we can't find it, we raise a \"404 Not "
"Found\"."
msgstr ""

#: ../../errorhandling.rst:295
msgid ""
"Here is another example implementation for a \"404 Page Not Found\" "
"exception:"
msgstr ""

#: ../../errorhandling.rst:306 ../../errorhandling.rst:360
msgid "When using :doc:`/patterns/appfactories`:"
msgstr ""

#: ../../errorhandling.rst:320
msgid "An example template might be this:"
msgstr ""

#: ../../errorhandling.rst:334
msgid "Further Examples"
msgstr ""

#: ../../errorhandling.rst:336
msgid ""
"The above examples wouldn't actually be an improvement on the default "
"exception pages. We can create a custom 500.html template like this:"
msgstr ""

#: ../../errorhandling.rst:349
msgid ""
"It can be implemented by rendering the template on \"500 Internal Server "
"Error\":"
msgstr ""

#: ../../errorhandling.rst:374
msgid "When using :doc:`/blueprints`:"
msgstr ""

#: ../../errorhandling.rst:392
msgid "Blueprint Error Handlers"
msgstr ""

#: ../../errorhandling.rst:394
msgid ""
"In :doc:`/blueprints`, most error handlers will work as expected. "
"However, there is a caveat concerning handlers for 404 and 405 "
"exceptions. These error handlers are only invoked from an appropriate "
"``raise`` statement or a call to ``abort`` in another of the blueprint's "
"view functions; they are not invoked by, e.g., an invalid URL access."
msgstr ""

#: ../../errorhandling.rst:400
msgid ""
"This is because the blueprint does not \"own\" a certain URL space, so "
"the application instance has no way of knowing which blueprint error "
"handler it should run if given an invalid URL. If you would like to "
"execute different handling strategies for these errors based on URL "
"prefixes, they may be defined at the application level using the "
"``request`` proxy object."
msgstr ""

#: ../../errorhandling.rst:435
msgid "Returning API Errors as JSON"
msgstr ""

#: ../../errorhandling.rst:437
msgid ""
"When building APIs in Flask, some developers realise that the built-in "
"exceptions are not expressive enough for APIs and that the content type "
"of :mimetype:`text/html` they are emitting is not very useful for API "
"consumers."
msgstr ""

#: ../../errorhandling.rst:441
msgid ""
"Using the same techniques as above and :func:`~flask.json.jsonify` we can"
" return JSON responses to API errors.  :func:`~flask.abort` is called "
"with a ``description`` parameter. The error handler will use that as the "
"JSON error message, and set the status code to 404."
msgstr ""

#: ../../errorhandling.rst:463
msgid ""
"We can also create custom exception classes. For instance, we can "
"introduce a new custom exception for an API that can take a proper human "
"readable message, a status code for the error and some optional payload "
"to give more context for the error."
msgstr ""

#: ../../errorhandling.rst:468
msgid "This is a simple example:"
msgstr ""

#: ../../errorhandling.rst:507
msgid ""
"A view can now raise that exception with an error message. Additionally "
"some extra payload can be provided as a dictionary through the `payload` "
"parameter."
msgstr ""

#: ../../errorhandling.rst:513
msgid "Logging"
msgstr ""

#: ../../errorhandling.rst:515
msgid ""
"See :doc:`/logging` for information about how to log exceptions, such as "
"by emailing them to admins."
msgstr ""

#: ../../errorhandling.rst:520
msgid "Debugging"
msgstr ""

#: ../../errorhandling.rst:522
msgid ""
"See :doc:`/debugging` for information about how to debug errors in "
"development and production."
msgstr ""
