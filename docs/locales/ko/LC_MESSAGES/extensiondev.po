# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../extensiondev.rst:2
msgid "Flask Extension Development"
msgstr ""

#: ../../extensiondev.rst:6
msgid ""
"Extensions are extra packages that add functionality to a Flask "
"application. While `PyPI`_ contains many Flask extensions, you may not "
"find one that fits your need. If this is the case, you can create your "
"own, and publish it for others to use as well."
msgstr ""

#: ../../extensiondev.rst:11
msgid ""
"This guide will show how to create a Flask extension, and some of the "
"common patterns and requirements involved. Since extensions can do "
"anything, this guide won't be able to cover every possibility."
msgstr ""

#: ../../extensiondev.rst:15
msgid ""
"The best ways to learn about extensions are to look at how other "
"extensions you use are written, and discuss with others. Discuss your "
"design ideas with others on our `Discord Chat`_ or `GitHub Discussions`_."
msgstr ""

#: ../../extensiondev.rst:20
msgid ""
"The best extensions share common patterns, so that anyone familiar with "
"using one extension won't feel completely lost with another. This can "
"only work if collaboration happens early."
msgstr ""

#: ../../extensiondev.rst:26
msgid "Naming"
msgstr ""

#: ../../extensiondev.rst:28
msgid ""
"A Flask extension typically has ``flask`` in its name as a prefix or "
"suffix. If it wraps another library, it should include the library name "
"as well. This makes it easy to search for extensions, and makes their "
"purpose clearer."
msgstr ""

#: ../../extensiondev.rst:33
msgid ""
"A general Python packaging recommendation is that the install name from "
"the package index and the name used in ``import`` statements should be "
"related. The import name is lowercase, with words separated by "
"underscores (``_``). The install name is either lower case or title case,"
" with words separated by dashes (``-``). If it wraps another library, "
"prefer using the same case as that library's name."
msgstr ""

#: ../../extensiondev.rst:40
msgid "Here are some example install and import names:"
msgstr ""

#: ../../extensiondev.rst:42
msgid "``Flask-Name`` imported as ``flask_name``"
msgstr ""

#: ../../extensiondev.rst:43
msgid "``flask-name-lower`` imported as ``flask_name_lower``"
msgstr ""

#: ../../extensiondev.rst:44
msgid "``Flask-ComboName`` imported as ``flask_comboname``"
msgstr ""

#: ../../extensiondev.rst:45
msgid "``Name-Flask`` imported as ``name_flask``"
msgstr ""

#: ../../extensiondev.rst:49
msgid "The Extension Class and Initialization"
msgstr ""

#: ../../extensiondev.rst:51
msgid ""
"All extensions will need some entry point that initializes the extension "
"with the application. The most common pattern is to create a class that "
"represents the extension's configuration and behavior, with an "
"``init_app`` method to apply the extension instance to the given "
"application instance."
msgstr ""

#: ../../extensiondev.rst:67
msgid ""
"It is important that the app is not stored on the extension, don't do "
"``self.app = app``. The only time the extension should have direct access"
" to an app is during ``init_app``, otherwise it should use "
":data:`current_app`."
msgstr ""

#: ../../extensiondev.rst:72
msgid ""
"This allows the extension to support the application factory pattern, "
"avoids circular import issues when importing the extension instance "
"elsewhere in a user's code, and makes testing with different "
"configurations easier."
msgstr ""

#: ../../extensiondev.rst:86
msgid ""
"Above, the ``hello`` extension instance exists independently of the "
"application. This means that other modules in a user's project can do "
"``from project import hello`` and use the extension in blueprints before "
"the app exists."
msgstr ""

#: ../../extensiondev.rst:91
msgid ""
"The :attr:`Flask.extensions` dict can be used to store a reference to the"
" extension on the application, or some other state specific to the "
"application. Be aware that this is a single namespace, so use a name "
"unique to your extension, such as the extension's name without the "
"\"flask\" prefix."
msgstr ""

#: ../../extensiondev.rst:99
msgid "Adding Behavior"
msgstr ""

#: ../../extensiondev.rst:101
msgid ""
"There are many ways that an extension can add behavior. Any setup methods"
" that are available on the :class:`Flask` object can be used during an "
"extension's ``init_app`` method."
msgstr ""

#: ../../extensiondev.rst:105
msgid ""
"A common pattern is to use :meth:`~Flask.before_request` to initialize "
"some data or a connection at the beginning of each request, then "
":meth:`~Flask.teardown_request` to clean it up at the end. This can be "
"stored on :data:`g`, discussed more below."
msgstr ""

#: ../../extensiondev.rst:110
msgid ""
"A more lazy approach is to provide a method that initializes and caches "
"the data or connection. For example, a ``ext.get_db`` method could create"
" a database connection the first time it's called, so that a view that "
"doesn't use the database doesn't create a connection."
msgstr ""

#: ../../extensiondev.rst:115
msgid ""
"Besides doing something before and after every view, your extension might"
" want to add some specific views as well. In this case, you could define "
"a :class:`Blueprint`, then call :meth:`~Flask.register_blueprint` during "
"``init_app`` to add the blueprint to the app."
msgstr ""

#: ../../extensiondev.rst:122
msgid "Configuration Techniques"
msgstr ""

#: ../../extensiondev.rst:124
msgid ""
"There can be multiple levels and sources of configuration for an "
"extension. You should consider what parts of your extension fall into "
"each one."
msgstr ""

#: ../../extensiondev.rst:128
msgid ""
"Configuration per application instance, through ``app.config`` values. "
"This is configuration that could reasonably change for each deployment of"
" an application. A common example is a URL to an external resource, such "
"as a database. Configuration keys should start with the extension's name "
"so that they don't interfere with other extensions."
msgstr ""

#: ../../extensiondev.rst:134
msgid ""
"Configuration per extension instance, through ``__init__`` arguments. "
"This configuration usually affects how the extension is used, such that "
"it wouldn't make sense to change it per deployment."
msgstr ""

#: ../../extensiondev.rst:138
msgid ""
"Configuration per extension instance, through instance attributes and "
"decorator methods. It might be more ergonomic to assign to ``ext.value``,"
" or use a ``@ext.register`` decorator to register a function, after the "
"extension instance has been created."
msgstr ""

#: ../../extensiondev.rst:142
msgid ""
"Global configuration through class attributes. Changing a class attribute"
" like ``Ext.connection_class`` can customize default behavior without "
"making a subclass. This could be combined per-extension configuration to "
"override defaults."
msgstr ""

#: ../../extensiondev.rst:146
msgid ""
"Subclassing and overriding methods and attributes. Making the API of the "
"extension itself something that can be overridden provides a very "
"powerful tool for advanced customization."
msgstr ""

#: ../../extensiondev.rst:150
msgid "The :class:`~flask.Flask` object itself uses all of these techniques."
msgstr ""

#: ../../extensiondev.rst:152
msgid ""
"It's up to you to decide what configuration is appropriate for your "
"extension, based on what you need and what you want to support."
msgstr ""

#: ../../extensiondev.rst:155
msgid ""
"Configuration should not be changed after the application setup phase is "
"complete and the server begins handling requests. Configuration is "
"global, any changes to it are not guaranteed to be visible to other "
"workers."
msgstr ""

#: ../../extensiondev.rst:162
msgid "Data During a Request"
msgstr ""

#: ../../extensiondev.rst:164
msgid ""
"When writing a Flask application, the :data:`~flask.g` object is used to "
"store information during a request. For example the :doc:`tutorial "
"<tutorial/database>` stores a connection to a SQLite database as "
"``g.db``. Extensions can also use this, with some care. Since ``g`` is a "
"single global namespace, extensions must use unique names that won't "
"collide with user data. For example, use the extension name as a prefix, "
"or as a namespace."
msgstr ""

#: ../../extensiondev.rst:182
msgid ""
"The data in ``g`` lasts for an application context. An application "
"context is active when a request context is, or when a CLI command is "
"run. If you're storing something that should be closed, use "
":meth:`~flask.Flask.teardown_appcontext` to ensure that it gets closed "
"when the application context ends. If it should only be valid during a "
"request, or would not be used in the CLI outside a request, use "
":meth:`~flask.Flask.teardown_request`."
msgstr ""

#: ../../extensiondev.rst:192
msgid "Views and Models"
msgstr ""

#: ../../extensiondev.rst:194
msgid ""
"Your extension views might want to interact with specific models in your "
"database, or some other extension or data connected to your application. "
"For example, let's consider a ``Flask-SimpleBlog`` extension that works "
"with Flask-SQLAlchemy to provide a ``Post`` model and views to write and "
"read posts."
msgstr ""

#: ../../extensiondev.rst:200
msgid ""
"The ``Post`` model needs to subclass the Flask-SQLAlchemy ``db.Model`` "
"object, but that's only available once you've created an instance of that"
" extension, not when your extension is defining its views. So how can the"
" view code, defined before the model exists, access the model?"
msgstr ""

#: ../../extensiondev.rst:205
msgid ""
"One method could be to use :doc:`views`. During ``__init__``, create the "
"model, then create the views by passing the model to the view class's "
":meth:`~views.View.as_view` method."
msgstr ""

#: ../../extensiondev.rst:235
msgid ""
"Another technique could be to use an attribute on the extension, such as "
"``self.post_model`` from above. Add the extension to ``app.extensions`` "
"in ``init_app``, then access "
"``current_app.extensions[\"simple_blog\"].post_model`` from views."
msgstr ""

#: ../../extensiondev.rst:240
msgid ""
"You may also want to provide base classes so that users can provide their"
" own ``Post`` model that conforms to the API your extension expects. So "
"they could implement ``class Post(blog.BasePost)``, then set it as "
"``blog.post_model``."
msgstr ""

#: ../../extensiondev.rst:245
msgid ""
"As you can see, this can get a bit complex. Unfortunately, there's no "
"perfect solution here, only different strategies and tradeoffs depending "
"on your needs and how much customization you want to offer. Luckily, this"
" sort of resource dependency is not a common need for most extensions. "
"Remember, if you need help with design, ask on our `Discord Chat`_ or "
"`GitHub Discussions`_."
msgstr ""

#: ../../extensiondev.rst:254
msgid "Recommended Extension Guidelines"
msgstr ""

#: ../../extensiondev.rst:256
msgid ""
"Flask previously had the concept of \"approved extensions\", where the "
"Flask maintainers evaluated the quality, support, and compatibility of "
"the extensions before listing them. While the list became too difficult "
"to maintain over time, the guidelines are still relevant to all "
"extensions maintained and developed today, as they help the Flask "
"ecosystem remain consistent and compatible."
msgstr ""

#: ../../extensiondev.rst:263
msgid ""
"An extension requires a maintainer. In the event an extension author "
"would like to move beyond the project, the project should find a new "
"maintainer and transfer access to the repository, documentation, PyPI, "
"and any other services. The `Pallets-Eco`_ organization on GitHub allows "
"for community maintenance with oversight from the Pallets maintainers."
msgstr ""

#: ../../extensiondev.rst:269
msgid ""
"The naming scheme is *Flask-ExtensionName* or *ExtensionName-Flask*. It "
"must provide exactly one package or module named "
"``flask_extension_name``."
msgstr ""

#: ../../extensiondev.rst:272
msgid ""
"The extension must use an open source license. The Python web ecosystem "
"tends to prefer BSD or MIT. It must be open source and publicly "
"available."
msgstr ""

#: ../../extensiondev.rst:275
msgid "The extension's API must have the following characteristics:"
msgstr ""

#: ../../extensiondev.rst:277
msgid ""
"It must support multiple applications running in the same Python process."
" Use ``current_app`` instead of ``self.app``, store configuration and "
"state per application instance."
msgstr ""

#: ../../extensiondev.rst:280
msgid ""
"It must be possible to use the factory pattern for creating applications."
" Use the ``ext.init_app()`` pattern."
msgstr ""

#: ../../extensiondev.rst:283
msgid ""
"From a clone of the repository, an extension with its dependencies must "
"be installable in editable mode with ``pip install -e .``."
msgstr ""

#: ../../extensiondev.rst:285
msgid ""
"It must ship tests that can be invoked with a common tool like ``tox -e "
"py``, ``nox -s test`` or ``pytest``. If not using ``tox``, the test "
"dependencies should be specified in a requirements file. The tests must "
"be part of the sdist distribution."
msgstr ""

#: ../../extensiondev.rst:289
msgid ""
"A link to the documentation or project website must be in the PyPI "
"metadata or the readme. The documentation should use the Flask theme from"
" the `Official Pallets Themes`_."
msgstr ""

#: ../../extensiondev.rst:292
msgid ""
"The extension's dependencies should not use upper bounds or assume any "
"particular version scheme, but should use lower bounds to indicate "
"minimum compatibility support. For example, ``sqlalchemy>=1.4``."
msgstr ""

#: ../../extensiondev.rst:296
msgid ""
"Indicate the versions of Python supported using "
"``python_requires=\">=version\"``. Flask itself supports Python >=3.8 as "
"of April 2023, but this will update over time."
msgstr ""
