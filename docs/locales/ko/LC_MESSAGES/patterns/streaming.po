# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../patterns/streaming.rst:2
msgid "Streaming Contents"
msgstr ""

#: ../../patterns/streaming.rst:4
msgid ""
"Sometimes you want to send an enormous amount of data to the client, much"
" more than you want to keep in memory.  When you are generating the data "
"on the fly though, how do you send that back to the client without the "
"roundtrip to the filesystem?"
msgstr ""

#: ../../patterns/streaming.rst:9
msgid "The answer is by using generators and direct responses."
msgstr ""

#: ../../patterns/streaming.rst:12
msgid "Basic Usage"
msgstr ""

#: ../../patterns/streaming.rst:14
msgid ""
"This is a basic view function that generates a lot of CSV data on the "
"fly. The trick is to have an inner function that uses a generator to "
"generate data and to then invoke that function and pass it to a response "
"object::"
msgstr ""

#: ../../patterns/streaming.rst:25
msgid ""
"Each ``yield`` expression is directly sent to the browser.  Note though "
"that some WSGI middlewares might break streaming, so be careful there in "
"debug environments with profilers and other things you might have "
"enabled."
msgstr ""

#: ../../patterns/streaming.rst:30
msgid "Streaming from Templates"
msgstr ""

#: ../../patterns/streaming.rst:32
msgid ""
"The Jinja2 template engine supports rendering a template piece by piece, "
"returning an iterator of strings. Flask provides the "
":func:`~flask.stream_template` and :func:`~flask.stream_template_string` "
"functions to make this easier to use."
msgstr ""

#: ../../patterns/streaming.rst:45
msgid ""
"The parts yielded by the render stream tend to match statement blocks in "
"the template."
msgstr ""

#: ../../patterns/streaming.rst:50
msgid "Streaming with Context"
msgstr ""

#: ../../patterns/streaming.rst:52
msgid ""
"The :data:`~flask.request` will not be active while the generator is "
"running, because the view has already returned at that point. If you try "
"to access ``request``, you'll get a ``RuntimeError``."
msgstr ""

#: ../../patterns/streaming.rst:56
msgid ""
"If your generator function relies on data in ``request``, use the "
":func:`~flask.stream_with_context` wrapper. This will keep the request "
"context active during the generator."
msgstr ""

#: ../../patterns/streaming.rst:73
msgid "It can also be used as a decorator."
msgstr ""

#: ../../patterns/streaming.rst:83
msgid ""
"The :func:`~flask.stream_template` and "
":func:`~flask.stream_template_string` functions automatically use "
":func:`~flask.stream_with_context` if a request is active."
msgstr ""
