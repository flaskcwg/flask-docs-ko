# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../patterns/packages.rst:2
msgid "Large Applications as Packages"
msgstr ""

#: ../../patterns/packages.rst:4
msgid "Imagine a simple flask application structure that looks like this::"
msgstr ""

#: ../../patterns/packages.rst:16
msgid ""
"While this is fine for small applications, for larger applications it's a"
" good idea to use a package instead of a module. The "
":doc:`/tutorial/index` is structured to use the package pattern, see the "
":gh:`example code <examples/tutorial>`."
msgstr ""

#: ../../patterns/packages.rst:22
msgid "Simple Packages"
msgstr ""

#: ../../patterns/packages.rst:24
msgid ""
"To convert that into a larger one, just create a new folder "
":file:`yourapplication` inside the existing one and move everything below"
" it. Then rename :file:`yourapplication.py` to :file:`__init__.py`.  "
"(Make sure to delete all ``.pyc`` files first, otherwise things would "
"most likely break)"
msgstr ""

#: ../../patterns/packages.rst:29 ../../patterns/packages.rst:101
msgid "You should then end up with something like that::"
msgstr ""

#: ../../patterns/packages.rst:42
msgid ""
"But how do you run your application now?  The naive ``python "
"yourapplication/__init__.py`` will not work.  Let's just say that Python "
"does not want modules in packages to be the startup file.  But that is "
"not a big problem, just add a new file called :file:`pyproject.toml` next"
" to the inner :file:`yourapplication` folder with the following contents:"
msgstr ""

#: ../../patterns/packages.rst:60
msgid "Install your application so it is importable:"
msgstr ""

#: ../../patterns/packages.rst:66
msgid ""
"To use the ``flask`` command and run your application you need to set the"
" ``--app`` option that tells Flask where to find the application "
"instance:"
msgstr ""

#: ../../patterns/packages.rst:74
msgid ""
"What did we gain from this?  Now we can restructure the application a bit"
" into multiple modules.  The only thing you have to remember is the "
"following quick checklist:"
msgstr ""

#: ../../patterns/packages.rst:78
msgid ""
"the `Flask` application object creation has to be in the "
":file:`__init__.py` file.  That way each module can import it safely and "
"the `__name__` variable will resolve to the correct package."
msgstr ""

#: ../../patterns/packages.rst:81
msgid ""
"all the view functions (the ones with a :meth:`~flask.Flask.route` "
"decorator on top) have to be imported in the :file:`__init__.py` file. "
"Not the object itself, but the module it is in. Import the view module "
"**after the application object is created**."
msgstr ""

#: ../../patterns/packages.rst:86
msgid "Here's an example :file:`__init__.py`::"
msgstr ""

#: ../../patterns/packages.rst:93
msgid "And this is what :file:`views.py` would look like::"
msgstr ""

#: ../../patterns/packages.rst:116
msgid "Circular Imports"
msgstr ""

#: ../../patterns/packages.rst:118
msgid ""
"Every Python programmer hates them, and yet we just added some: circular "
"imports (That's when two modules depend on each other.  In this case "
":file:`views.py` depends on :file:`__init__.py`).  Be advised that this "
"is a bad idea in general but here it is actually fine.  The reason for "
"this is that we are not actually using the views in :file:`__init__.py` "
"and just ensuring the module is imported and we are doing that at the "
"bottom of the file."
msgstr ""

#: ../../patterns/packages.rst:128
msgid "Working with Blueprints"
msgstr ""

#: ../../patterns/packages.rst:130
msgid ""
"If you have larger applications it's recommended to divide them into "
"smaller groups where each group is implemented with the help of a "
"blueprint.  For a gentle introduction into this topic refer to the "
":doc:`/blueprints` chapter of the documentation."
msgstr ""
