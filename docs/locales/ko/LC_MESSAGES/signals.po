# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../signals.rst:2
msgid "Signals"
msgstr ""

#: ../../signals.rst:4
msgid ""
"Signals are a lightweight way to notify subscribers of certain events "
"during the lifecycle of the application and each request. When an event "
"occurs, it emits the signal, which calls each subscriber."
msgstr ""

#: ../../signals.rst:8
msgid ""
"Signals are implemented by the `Blinker`_ library. See its documentation "
"for detailed information. Flask provides some built-in signals. "
"Extensions may provide their own."
msgstr ""

#: ../../signals.rst:11
msgid ""
"Many signals mirror Flask's decorator-based callbacks with similar names."
" For example, the :data:`.request_started` signal is similar to the "
":meth:`~.Flask.before_request` decorator. The advantage of signals over "
"handlers is that they can be subscribed to temporarily, and can't "
"directly affect the application. This is useful for testing, metrics, "
"auditing, and more. For example, if you want to know what templates were "
"rendered at what parts of what requests, there is a signal that will "
"notify you of that information."
msgstr ""

#: ../../signals.rst:21
msgid "Core Signals"
msgstr ""

#: ../../signals.rst:23
msgid ""
"See :ref:`core-signals-list` for a list of all built-in signals. The "
":doc:`lifecycle` page also describes the order that signals and "
"decorators execute."
msgstr ""

#: ../../signals.rst:28
msgid "Subscribing to Signals"
msgstr ""

#: ../../signals.rst:30
msgid ""
"To subscribe to a signal, you can use the "
":meth:`~blinker.base.Signal.connect` method of a signal.  The first "
"argument is the function that should be called when the signal is "
"emitted, the optional second argument specifies a sender.  To unsubscribe"
" from a signal, you can use the :meth:`~blinker.base.Signal.disconnect` "
"method."
msgstr ""

#: ../../signals.rst:36
msgid ""
"For all core Flask signals, the sender is the application that issued the"
" signal.  When you subscribe to a signal, be sure to also provide a "
"sender unless you really want to listen for signals from all "
"applications.  This is especially true if you are developing an "
"extension."
msgstr ""

#: ../../signals.rst:41
msgid ""
"For example, here is a helper context manager that can be used in a unit "
"test to determine which templates were rendered and what variables were "
"passed to the template::"
msgstr ""

#: ../../signals.rst:59
msgid "This can now easily be paired with a test client::"
msgstr ""

#: ../../signals.rst:69
msgid ""
"Make sure to subscribe with an extra ``**extra`` argument so that your "
"calls don't fail if Flask introduces new arguments to the signals."
msgstr ""

#: ../../signals.rst:72
msgid ""
"All the template rendering in the code issued by the application `app` in"
" the body of the ``with`` block will now be recorded in the `templates` "
"variable.  Whenever a template is rendered, the template object as well "
"as context are appended to it."
msgstr ""

#: ../../signals.rst:77
msgid ""
"Additionally there is a convenient helper method "
"(:meth:`~blinker.base.Signal.connected_to`)  that allows you to "
"temporarily subscribe a function to a signal with a context manager on "
"its own.  Because the return value of the context manager cannot be "
"specified that way, you have to pass the list in as an argument::"
msgstr ""

#: ../../signals.rst:90
msgid "The example above would then look like this::"
msgstr ""

#: ../../signals.rst:98
msgid "Creating Signals"
msgstr ""

#: ../../signals.rst:100
msgid ""
"If you want to use signals in your own application, you can use the "
"blinker library directly.  The most common use case are named signals in "
"a custom :class:`~blinker.base.Namespace`.  This is what is recommended "
"most of the time::"
msgstr ""

#: ../../signals.rst:108
msgid "Now you can create new signals like this::"
msgstr ""

#: ../../signals.rst:112
msgid ""
"The name for the signal here makes it unique and also simplifies "
"debugging.  You can access the name of the signal with the "
":attr:`~blinker.base.NamedSignal.name` attribute."
msgstr ""

#: ../../signals.rst:119
msgid "Sending Signals"
msgstr ""

#: ../../signals.rst:121
msgid ""
"If you want to emit a signal, you can do so by calling the "
":meth:`~blinker.base.Signal.send` method.  It accepts a sender as first "
"argument and optionally some keyword arguments that are forwarded to the "
"signal subscribers::"
msgstr ""

#: ../../signals.rst:132
msgid ""
"Try to always pick a good sender.  If you have a class that is emitting a"
" signal, pass ``self`` as sender.  If you are emitting a signal from a "
"random function, you can pass ``current_app._get_current_object()`` as "
"sender."
msgstr ""

#: ../../signals.rst:136
msgid "Passing Proxies as Senders"
msgstr ""

#: ../../signals.rst:138
msgid ""
"Never pass :data:`~flask.current_app` as sender to a signal.  Use "
"``current_app._get_current_object()`` instead.  The reason for this is "
"that :data:`~flask.current_app` is a proxy and not the real application "
"object."
msgstr ""

#: ../../signals.rst:145
msgid "Signals and Flask's Request Context"
msgstr ""

#: ../../signals.rst:147
msgid ""
"Signals fully support :doc:`reqcontext` when receiving signals. Context-"
"local variables are consistently available between "
":data:`~flask.request_started` and :data:`~flask.request_finished`, so "
"you can rely on :class:`flask.g` and others as needed.  Note the "
"limitations described in :ref:`signals-sending` and the "
":data:`~flask.request_tearing_down` signal."
msgstr ""

#: ../../signals.rst:155
msgid "Decorator Based Signal Subscriptions"
msgstr ""

#: ../../signals.rst:157
msgid ""
"You can also easily subscribe to signals by using the "
":meth:`~blinker.base.NamedSignal.connect_via` decorator::"
msgstr ""
