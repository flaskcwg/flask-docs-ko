# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../config.rst:2
msgid "Configuration Handling"
msgstr ""

#: ../../config.rst:4
msgid ""
"Applications need some kind of configuration.  There are different "
"settings you might want to change depending on the application "
"environment like toggling the debug mode, setting the secret key, and "
"other such environment-specific things."
msgstr ""

#: ../../config.rst:9
msgid ""
"The way Flask is designed usually requires the configuration to be "
"available when the application starts up.  You can hard code the "
"configuration in the code, which for many small applications is not "
"actually that bad, but there are better ways."
msgstr ""

#: ../../config.rst:14
msgid ""
"Independent of how you load your config, there is a config object "
"available which holds the loaded configuration values: The "
":attr:`~flask.Flask.config` attribute of the :class:`~flask.Flask` "
"object.  This is the place where Flask itself puts certain configuration "
"values and also where extensions can put their configuration values.  But"
" this is also where you can have your own configuration."
msgstr ""

#: ../../config.rst:23
msgid "Configuration Basics"
msgstr ""

#: ../../config.rst:25
msgid ""
"The :attr:`~flask.Flask.config` is actually a subclass of a dictionary "
"and can be modified just like any dictionary::"
msgstr ""

#: ../../config.rst:31
msgid ""
"Certain configuration values are also forwarded to the "
":attr:`~flask.Flask` object so you can read and write them from there::"
msgstr ""

#: ../../config.rst:36
msgid ""
"To update multiple keys at once you can use the :meth:`dict.update` "
"method::"
msgstr ""

#: ../../config.rst:46
msgid "Debug Mode"
msgstr ""

#: ../../config.rst:48
msgid ""
"The :data:`DEBUG` config value is special because it may behave "
"inconsistently if changed after the app has begun setting up. In order to"
" set debug mode reliably, use the ``--debug`` option on the ``flask`` or "
"``flask run`` command. ``flask run`` will use the interactive debugger "
"and reloader by default in debug mode."
msgstr ""

#: ../../config.rst:57
msgid ""
"Using the option is recommended. While it is possible to set "
":data:`DEBUG` in your config or code, this is strongly discouraged. It "
"can't be read early by the ``flask run`` command, and some systems or "
"extensions may have already configured themselves based on a previous "
"value."
msgstr ""

#: ../../config.rst:64
msgid "Builtin Configuration Values"
msgstr ""

#: ../../config.rst:66
msgid "The following configuration values are used internally by Flask:"
msgstr ""

#: ../../config.rst:70
msgid ""
"Whether debug mode is enabled. When using ``flask run`` to start the "
"development server, an interactive debugger will be shown for unhandled "
"exceptions, and the server will be reloaded when code changes. The "
":attr:`~flask.Flask.debug` attribute maps to this config key. This is set"
" with the ``FLASK_DEBUG`` environment variable. It may not behave as "
"expected if set in code."
msgstr ""

#: ../../config.rst:76
msgid "**Do not enable debug mode when deploying in production.**"
msgstr ""

#: ../../config.rst:78 ../../config.rst:86 ../../config.rst:102
#: ../../config.rst:168 ../../config.rst:206 ../../config.rst:275
msgid "Default: ``False``"
msgstr ""

#: ../../config.rst:82
msgid ""
"Enable testing mode. Exceptions are propagated rather than handled by the"
" the app's error handlers. Extensions may also change their behavior to "
"facilitate easier testing. You should enable this in your own tests."
msgstr ""

#: ../../config.rst:90
msgid ""
"Exceptions are re-raised rather than being handled by the app's error "
"handlers. If not set, this is implicitly true if ``TESTING`` or ``DEBUG``"
" is enabled."
msgstr ""

#: ../../config.rst:94 ../../config.rst:112 ../../config.rst:126
#: ../../config.rst:143 ../../config.rst:153 ../../config.rst:176
#: ../../config.rst:220 ../../config.rst:230 ../../config.rst:260
#: ../../config.rst:267
msgid "Default: ``None``"
msgstr ""

#: ../../config.rst:98
msgid ""
"If there is no handler for an ``HTTPException``-type exception, re-raise "
"it to be handled by the interactive debugger instead of returning it as a"
" simple error response."
msgstr ""

#: ../../config.rst:106
msgid ""
"Trying to access a key that doesn't exist from request dicts like "
"``args`` and ``form`` will return a 400 Bad Request error page. Enable "
"this to treat the error as an unhandled exception instead so that you get"
" the interactive debugger. This is a more specific version of "
"``TRAP_HTTP_EXCEPTIONS``. If unset, it is enabled in debug mode."
msgstr ""

#: ../../config.rst:116
msgid ""
"A secret key that will be used for securely signing the session cookie "
"and can be used for any other security related needs by extensions or "
"your application. It should be a long random ``bytes`` or ``str``. For "
"example, copy the output of this to your config::"
msgstr ""

#: ../../config.rst:124
msgid ""
"**Do not reveal the secret key when posting questions or committing "
"code.**"
msgstr ""

#: ../../config.rst:130
msgid ""
"The name of the session cookie. Can be changed in case you already have a"
" cookie with the same name."
msgstr ""

#: ../../config.rst:133
msgid "Default: ``'session'``"
msgstr ""

#: ../../config.rst:137
msgid ""
"The value of the ``Domain`` parameter on the session cookie. If not set, "
"browsers will only send the cookie to the exact domain it was set from. "
"Otherwise, they will send it to any subdomain of the given value as well."
msgstr ""

#: ../../config.rst:141
msgid "Not setting this value is more restricted and secure than setting it."
msgstr ""

#: ../../config.rst:145
msgid "Not set by default, does not fall back to ``SERVER_NAME``."
msgstr ""

#: ../../config.rst:150
msgid ""
"The path that the session cookie will be valid for. If not set, the "
"cookie will be valid underneath ``APPLICATION_ROOT`` or ``/`` if that is "
"not set."
msgstr ""

#: ../../config.rst:157
msgid ""
"Browsers will not allow JavaScript access to cookies marked as \"HTTP "
"only\" for security."
msgstr ""

#: ../../config.rst:160 ../../config.rst:198
msgid "Default: ``True``"
msgstr ""

#: ../../config.rst:164
msgid ""
"Browsers will only send cookies with requests over HTTPS if the cookie is"
" marked \"secure\". The application must be served over HTTPS for this to"
" make sense."
msgstr ""

#: ../../config.rst:172
msgid ""
"Restrict how cookies are sent with requests from external sites. Can be "
"set to ``'Lax'`` (recommended) or ``'Strict'``. See :ref:`security-"
"cookie`."
msgstr ""

#: ../../config.rst:182
msgid ""
"If ``session.permanent`` is true, the cookie's expiration will be set "
"this number of seconds in the future. Can either be a "
":class:`datetime.timedelta` or an ``int``."
msgstr ""

#: ../../config.rst:186
msgid ""
"Flask's default cookie implementation validates that the cryptographic "
"signature is not older than this value."
msgstr ""

#: ../../config.rst:189
msgid "Default: ``timedelta(days=31)`` (``2678400`` seconds)"
msgstr ""

#: ../../config.rst:193
msgid ""
"Control whether the cookie is sent with every response when "
"``session.permanent`` is true. Sending the cookie every time (the "
"default) can more reliably keep the session from expiring, but uses more "
"bandwidth. Non-permanent sessions are not affected."
msgstr ""

#: ../../config.rst:202
msgid ""
"When serving files, set the ``X-Sendfile`` header instead of serving the "
"data with Flask. Some web servers, such as Apache, recognize this and "
"serve the data more efficiently. This only makes sense when using such a "
"server."
msgstr ""

#: ../../config.rst:210
msgid ""
"When serving files, set the cache control max age to this number of "
"seconds. Can be a :class:`datetime.timedelta` or an ``int``. Override "
"this value on a per-file basis using "
":meth:`~flask.Flask.get_send_file_max_age` on the application or "
"blueprint."
msgstr ""

#: ../../config.rst:216
msgid ""
"If ``None``, ``send_file`` tells the browser to use conditional requests "
"will be used instead of a timed cache, which is usually preferable."
msgstr ""

#: ../../config.rst:224
msgid ""
"Inform the application what host and port it is bound to. Required for "
"subdomain route matching support."
msgstr ""

#: ../../config.rst:227
msgid ""
"If set, ``url_for`` can generate external URLs with only an application "
"context instead of a request context."
msgstr ""

#: ../../config.rst:232
msgid "Does not affect ``SESSION_COOKIE_DOMAIN``."
msgstr ""

#: ../../config.rst:237
msgid ""
"Inform the application what path it is mounted under by the application /"
" web server.  This is used for generating URLs outside the context of a "
"request (inside a request, the dispatcher is responsible for setting "
"``SCRIPT_NAME`` instead; see :doc:`/patterns/appdispatch` for examples of"
" dispatch configuration)."
msgstr ""

#: ../../config.rst:243
msgid ""
"Will be used for the session cookie path if ``SESSION_COOKIE_PATH`` is "
"not set."
msgstr ""

#: ../../config.rst:246
msgid "Default: ``'/'``"
msgstr ""

#: ../../config.rst:250
msgid ""
"Use this scheme for generating external URLs when not in a request "
"context."
msgstr ""

#: ../../config.rst:252
msgid "Default: ``'http'``"
msgstr ""

#: ../../config.rst:256
msgid ""
"Don't read more than this many bytes from the incoming request data. If "
"not set and the request does not specify a ``CONTENT_LENGTH``, no data "
"will be read for security."
msgstr ""

#: ../../config.rst:264
msgid ""
"Reload templates when they are changed. If not set, it will be enabled in"
" debug mode."
msgstr ""

#: ../../config.rst:271
msgid ""
"Log debugging information tracing how a template file was loaded. This "
"can be useful to figure out why a template was not loaded or the wrong "
"file appears to be loaded."
msgstr ""

#: ../../config.rst:279
msgid ""
"Warn if cookie headers are larger than this many bytes. Defaults to "
"``4093``. Larger cookies may be silently ignored by browsers. Set to "
"``0`` to disable the warning."
msgstr ""

#: ../../config.rst:326
msgid ""
"``JSON_AS_ASCII``, ``JSON_SORT_KEYS``, ``JSONIFY_MIMETYPE``, and "
"``JSONIFY_PRETTYPRINT_REGULAR`` were removed. The default ``app.json`` "
"provider has equivalent attributes instead."
msgstr ""

#: ../../config.rst:331
msgid "``ENV`` was removed."
msgstr ""

#: ../../config.rst:323
msgid "Removed ``PRESERVE_CONTEXT_ON_EXCEPTION``."
msgstr ""

#: ../../config.rst:311
msgid ""
"``LOGGER_NAME`` and ``LOGGER_HANDLER_POLICY`` were removed. See "
":doc:`/logging` for information about configuration."
msgstr ""

#: ../../config.rst:315
msgid "Added :data:`ENV` to reflect the :envvar:`FLASK_ENV` environment variable."
msgstr ""

#: ../../config.rst:318
msgid ""
"Added :data:`SESSION_COOKIE_SAMESITE` to control the session cookie's "
"``SameSite`` option."
msgstr ""

#: ../../config.rst:321
msgid "Added :data:`MAX_COOKIE_SIZE` to control a warning from Werkzeug."
msgstr ""

#: ../../config.rst:307
msgid ""
"``SESSION_REFRESH_EACH_REQUEST``, ``TEMPLATES_AUTO_RELOAD``, "
"``LOGGER_HANDLER_POLICY``, ``EXPLAIN_TEMPLATE_LOADING``"
msgstr ""

#: ../../config.rst:304
msgid "``JSON_AS_ASCII``, ``JSON_SORT_KEYS``, ``JSONIFY_PRETTYPRINT_REGULAR``"
msgstr ""

#: ../../config.rst:301
msgid "``PREFERRED_URL_SCHEME``"
msgstr ""

#: ../../config.rst:295
msgid ""
"``TRAP_BAD_REQUEST_ERRORS``, ``TRAP_HTTP_EXCEPTIONS``, "
"``APPLICATION_ROOT``, ``SESSION_COOKIE_DOMAIN``, ``SESSION_COOKIE_PATH``,"
" ``SESSION_COOKIE_HTTPONLY``, ``SESSION_COOKIE_SECURE``"
msgstr ""

#: ../../config.rst:292
msgid "``PROPAGATE_EXCEPTIONS``, ``PRESERVE_CONTEXT_ON_EXCEPTION``"
msgstr ""

#: ../../config.rst:289
msgid "``MAX_CONTENT_LENGTH``"
msgstr ""

#: ../../config.rst:286
msgid "``SERVER_NAME``"
msgstr ""

#: ../../config.rst:283
msgid "``LOGGER_NAME``"
msgstr ""

#: ../../config.rst:336
msgid "Configuring from Python Files"
msgstr ""

#: ../../config.rst:338
msgid ""
"Configuration becomes more useful if you can store it in a separate file,"
" ideally located outside the actual application package. You can deploy "
"your application, then separately configure it for the specific "
"deployment."
msgstr ""

#: ../../config.rst:342
msgid "A common pattern is this::"
msgstr ""

#: ../../config.rst:348
msgid ""
"This first loads the configuration from the "
"`yourapplication.default_settings` module and then overrides the values "
"with the contents of the file the :envvar:`YOURAPPLICATION_SETTINGS` "
"environment variable points to.  This environment variable can be set in "
"the shell before starting the server:"
msgstr ""

#: ../../config.rst:356 ../../config.rst:438
msgid "Bash"
msgstr ""

#: ../../config.rst:364 ../../config.rst:447
msgid "Fish"
msgstr ""

#: ../../config.rst:372 ../../config.rst:456
msgid "CMD"
msgstr ""

#: ../../config.rst:380 ../../config.rst:465
msgid "Powershell"
msgstr ""

#: ../../config.rst:388
msgid ""
"The configuration files themselves are actual Python files.  Only values "
"in uppercase are actually stored in the config object later on.  So make "
"sure to use uppercase letters for your config keys."
msgstr ""

#: ../../config.rst:392
msgid "Here is an example of a configuration file::"
msgstr ""

#: ../../config.rst:397
msgid ""
"Make sure to load the configuration very early on, so that extensions "
"have the ability to access the configuration when starting up.  There are"
" other methods on the config object as well to load from individual "
"files.  For a complete reference, read the :class:`~flask.Config` "
"object's documentation."
msgstr ""

#: ../../config.rst:405
msgid "Configuring from Data Files"
msgstr ""

#: ../../config.rst:407
msgid ""
"It is also possible to load configuration from a file in a format of your"
" choice using :meth:`~flask.Config.from_file`. For example to load from a"
" TOML file:"
msgstr ""

#: ../../config.rst:416
msgid "Or from a JSON file:"
msgstr ""

#: ../../config.rst:425
msgid "Configuring from Environment Variables"
msgstr ""

#: ../../config.rst:427
msgid ""
"In addition to pointing to configuration files using environment "
"variables, you may find it useful (or necessary) to control your "
"configuration values directly from the environment. Flask can be "
"instructed to load all environment variables starting with a specific "
"prefix into the config using :meth:`~flask.Config.from_prefixed_env`."
msgstr ""

#: ../../config.rst:433
msgid "Environment variables can be set in the shell before starting the server:"
msgstr ""

#: ../../config.rst:474
msgid ""
"The variables can then be loaded and accessed via the config with a key "
"equal to the environment variable name without the prefix i.e."
msgstr ""

#: ../../config.rst:482
msgid ""
"The prefix is ``FLASK_`` by default. This is configurable via the "
"``prefix`` argument of :meth:`~flask.Config.from_prefixed_env`."
msgstr ""

#: ../../config.rst:485
msgid ""
"Values will be parsed to attempt to convert them to a more specific type "
"than strings. By default :func:`json.loads` is used, so any valid JSON "
"value is possible, including lists and dicts. This is configurable via "
"the ``loads`` argument of :meth:`~flask.Config.from_prefixed_env`."
msgstr ""

#: ../../config.rst:490
msgid ""
"When adding a boolean value with the default JSON parsing, only \"true\" "
"and \"false\", lowercase, are valid values. Keep in mind that any non-"
"empty string is considered ``True`` by Python."
msgstr ""

#: ../../config.rst:494
msgid ""
"It is possible to set keys in nested dictionaries by separating the keys "
"with double underscore (``__``). Any intermediate keys that don't exist "
"on the parent dict will be initialized to an empty dict."
msgstr ""

#: ../../config.rst:506
msgid ""
"On Windows, environment variable keys are always uppercase, therefore the"
" above example would end up as ``MYAPI__CREDENTIALS__USERNAME``."
msgstr ""

#: ../../config.rst:509
msgid ""
"For even more config loading features, including merging and case-"
"insensitive Windows support, try a dedicated library such as Dynaconf_, "
"which includes integration with Flask."
msgstr ""

#: ../../config.rst:517
msgid "Configuration Best Practices"
msgstr ""

#: ../../config.rst:519
#, python-format
msgid ""
"The downside with the approach mentioned earlier is that it makes testing"
" a little harder.  There is no single 100% solution for this problem in "
"general, but there are a couple of things you can keep in mind to improve"
" that experience:"
msgstr ""

#: ../../config.rst:524
msgid ""
"Create your application in a function and register blueprints on it. That"
" way you can create multiple instances of your application with different"
" configurations attached which makes unit testing a lot easier.  You can "
"use this to pass in configuration as needed."
msgstr ""

#: ../../config.rst:529
msgid ""
"Do not write code that needs the configuration at import time.  If you "
"limit yourself to request-only accesses to the configuration you can "
"reconfigure the object later on as needed."
msgstr ""

#: ../../config.rst:533
msgid ""
"Make sure to load the configuration very early on, so that extensions can"
" access the configuration when calling ``init_app``."
msgstr ""

#: ../../config.rst:540
msgid "Development / Production"
msgstr ""

#: ../../config.rst:542
msgid ""
"Most applications need more than one configuration.  There should be at "
"least separate configurations for the production server and the one used "
"during development.  The easiest way to handle this is to use a default "
"configuration that is always loaded and part of the version control, and "
"a separate configuration that overrides the values as necessary as "
"mentioned in the example above::"
msgstr ""

#: ../../config.rst:553
msgid ""
"Then you just have to add a separate :file:`config.py` file and export "
"``YOURAPPLICATION_SETTINGS=/path/to/config.py`` and you are done.  "
"However there are alternative ways as well.  For example you could use "
"imports or subclassing."
msgstr ""

#: ../../config.rst:558
msgid ""
"What is very popular in the Django world is to make the import explicit "
"in the config file by adding ``from yourapplication.default_settings "
"import *`` to the top of the file and then overriding the changes by "
"hand. You could also inspect an environment variable like "
"``YOURAPPLICATION_MODE`` and set that to `production`, `development` etc "
"and import different hard-coded files based on that."
msgstr ""

#: ../../config.rst:565
msgid ""
"An interesting pattern is also to use classes and inheritance for "
"configuration::"
msgstr ""

#: ../../config.rst:581
msgid ""
"To enable such a config you just have to call into "
":meth:`~flask.Config.from_object`::"
msgstr ""

#: ../../config.rst:586
msgid ""
"Note that :meth:`~flask.Config.from_object` does not instantiate the "
"class object. If you need to instantiate the class, such as to access a "
"property, then you must do so before calling "
":meth:`~flask.Config.from_object`::"
msgstr ""

#: ../../config.rst:598
msgid ""
"Instantiating the configuration object allows you to use ``@property`` in"
" your configuration classes::"
msgstr ""

#: ../../config.rst:621
msgid ""
"There are many different ways and it's up to you how you want to manage "
"your configuration files.  However here a list of good recommendations:"
msgstr ""

#: ../../config.rst:624
msgid ""
"Keep a default configuration in version control.  Either populate the "
"config with this default configuration or import it in your own "
"configuration files before overriding values."
msgstr ""

#: ../../config.rst:627
msgid ""
"Use an environment variable to switch between the configurations. This "
"can be done from outside the Python interpreter and makes development and"
" deployment much easier because you can quickly and easily switch between"
" different configs without having to touch the code at all.  If you are "
"working often on different projects you can even create your own script "
"for sourcing that activates a virtualenv and exports the development "
"configuration for you."
msgstr ""

#: ../../config.rst:634
msgid ""
"Use a tool like `fabric`_ to push code and configuration separately to "
"the production server(s)."
msgstr ""

#: ../../config.rst:643
msgid "Instance Folders"
msgstr ""

#: ../../config.rst:647
msgid ""
"Flask 0.8 introduces instance folders.  Flask for a long time made it "
"possible to refer to paths relative to the application's folder directly "
"(via :attr:`Flask.root_path`).  This was also how many developers loaded "
"configurations stored next to the application.  Unfortunately however "
"this only works well if applications are not packages in which case the "
"root path refers to the contents of the package."
msgstr ""

#: ../../config.rst:654
msgid ""
"With Flask 0.8 a new attribute was introduced: "
":attr:`Flask.instance_path`.  It refers to a new concept called the "
"“instance folder”.  The instance folder is designed to not be under "
"version control and be deployment specific.  It's the perfect place to "
"drop things that either change at runtime or configuration files."
msgstr ""

#: ../../config.rst:660
msgid ""
"You can either explicitly provide the path of the instance folder when "
"creating the Flask application or you can let Flask autodetect the "
"instance folder.  For explicit configuration use the `instance_path` "
"parameter::"
msgstr ""

#: ../../config.rst:667
msgid "Please keep in mind that this path *must* be absolute when provided."
msgstr ""

#: ../../config.rst:669
msgid ""
"If the `instance_path` parameter is not provided the following default "
"locations are used:"
msgstr ""

#: ../../config.rst:672
msgid "Uninstalled module::"
msgstr ""

#: ../../config.rst:677
msgid "Uninstalled package::"
msgstr ""

#: ../../config.rst:683
msgid "Installed module or package::"
msgstr ""

#: ../../config.rst:688
msgid ""
"``$PREFIX`` is the prefix of your Python installation.  This can be "
"``/usr`` or the path to your virtualenv.  You can print the value of "
"``sys.prefix`` to see what the prefix is set to."
msgstr ""

#: ../../config.rst:692
msgid ""
"Since the config object provided loading of configuration files from "
"relative filenames we made it possible to change the loading via "
"filenames to be relative to the instance path if wanted.  The behavior of"
" relative paths in config files can be flipped between “relative to the "
"application root” (the default) to “relative to instance folder” via the "
"`instance_relative_config` switch to the application constructor::"
msgstr ""

#: ../../config.rst:701
msgid ""
"Here is a full example of how to configure Flask to preload the config "
"from a module and then override the config from a file in the instance "
"folder if it exists::"
msgstr ""

#: ../../config.rst:709
msgid ""
"The path to the instance folder can be found via the "
":attr:`Flask.instance_path`.  Flask also provides a shortcut to open a "
"file from the instance folder with :meth:`Flask.open_instance_resource`."
msgstr ""

#: ../../config.rst:713
msgid "Example usage for both::"
msgstr ""
