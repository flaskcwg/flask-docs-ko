# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../testing.rst:2
msgid "Testing Flask Applications"
msgstr ""

#: ../../testing.rst:4
msgid ""
"Flask provides utilities for testing an application. This documentation "
"goes over techniques for working with different parts of the application "
"in tests."
msgstr ""

#: ../../testing.rst:8
msgid "We will use the `pytest`_ framework to set up and run our tests."
msgstr ""

#: ../../testing.rst:16
#, python-format
msgid ""
"The :doc:`tutorial </tutorial/index>` goes over how to write tests for "
"100% coverage of the sample Flaskr blog application. See :doc:`the "
"tutorial on tests </tutorial/tests>` for a detailed explanation of "
"specific tests for an application."
msgstr ""

#: ../../testing.rst:23
msgid "Identifying Tests"
msgstr ""

#: ../../testing.rst:25
msgid ""
"Tests are typically located in the ``tests`` folder. Tests are functions "
"that start with ``test_``, in Python modules that start with ``test_``. "
"Tests can also be further grouped in classes that start with ``Test``."
msgstr ""

#: ../../testing.rst:29
msgid ""
"It can be difficult to know what to test. Generally, try to test the code"
" that you write, not the code of libraries that you use, since they are "
"already tested. Try to extract complex behaviors as separate functions to"
" test individually."
msgstr ""

#: ../../testing.rst:36
msgid "Fixtures"
msgstr ""

#: ../../testing.rst:38
msgid ""
"Pytest *fixtures* allow writing pieces of code that are reusable across "
"tests. A simple fixture returns a value, but a fixture can also do setup,"
" yield a value, then do teardown. Fixtures for the application, test "
"client, and CLI runner are shown below, they can be placed in "
"``tests/conftest.py``."
msgstr ""

#: ../../testing.rst:44
msgid ""
"If you're using an :doc:`application factory </patterns/appfactories>`, "
"define an ``app`` fixture to create and configure an app instance. You "
"can add code before and after the ``yield`` to set up and tear down other"
" resources, such as creating and clearing a database."
msgstr ""

#: ../../testing.rst:50
msgid ""
"If you're not using a factory, you already have an app object you can "
"import and configure directly. You can still use an ``app`` fixture to "
"set up and tear down resources."
msgstr ""

#: ../../testing.rst:84
msgid "Sending Requests with the Test Client"
msgstr ""

#: ../../testing.rst:86
msgid ""
"The test client makes requests to the application without running a live "
"server. Flask's client extends :doc:`Werkzeug's client <werkzeug:test>`, "
"see those docs for additional information."
msgstr ""

#: ../../testing.rst:91
msgid ""
"The ``client`` has methods that match the common HTTP request methods, "
"such as ``client.get()`` and ``client.post()``. They take many arguments "
"for building the request; you can find the full documentation in "
":class:`~werkzeug.test.EnvironBuilder`. Typically you'll use ``path``, "
"``query_string``, ``headers``, and ``data`` or ``json``."
msgstr ""

#: ../../testing.rst:97
msgid ""
"To make a request, call the method the request should use with the path "
"to the route to test. A :class:`~werkzeug.test.TestResponse` is returned "
"to examine the response data. It has all the usual properties of a "
"response object. You'll usually look at ``response.data``, which is the "
"bytes returned by the view. If you want to use text, Werkzeug 2.1 "
"provides ``response.text``, or use ``response.get_data(as_text=True)``."
msgstr ""

#: ../../testing.rst:111
msgid ""
"Pass a dict ``query_string={\"key\": \"value\", ...}`` to set arguments "
"in the query string (after the ``?`` in the URL). Pass a dict "
"``headers={}`` to set request headers."
msgstr ""

#: ../../testing.rst:115
msgid ""
"To send a request body in a POST or PUT request, pass a value to "
"``data``. If raw bytes are passed, that exact body is used. Usually, "
"you'll pass a dict to set form data."
msgstr ""

#: ../../testing.rst:121
msgid "Form Data"
msgstr ""

#: ../../testing.rst:123
msgid ""
"To send form data, pass a dict to ``data``. The ``Content-Type`` header "
"will be set to ``multipart/form-data`` or ``application/x-www-form-"
"urlencoded`` automatically."
msgstr ""

#: ../../testing.rst:127
msgid ""
"If a value is a file object opened for reading bytes (``\"rb\"`` mode), "
"it will be treated as an uploaded file. To change the detected filename "
"and content type, pass a ``(file, filename, content_type)`` tuple. File "
"objects will be closed after making the request, so they do not need to "
"use the usual ``with open() as f:`` pattern."
msgstr ""

#: ../../testing.rst:133
msgid ""
"It can be useful to store files in a ``tests/resources`` folder, then use"
" ``pathlib.Path`` to get files relative to the current test file."
msgstr ""

#: ../../testing.rst:153
msgid "JSON Data"
msgstr ""

#: ../../testing.rst:155
msgid ""
"To send JSON data, pass an object to ``json``. The ``Content-Type`` "
"header will be set to ``application/json`` automatically."
msgstr ""

#: ../../testing.rst:158
msgid ""
"Similarly, if the response contains JSON data, the ``response.json`` "
"attribute will contain the deserialized object."
msgstr ""

#: ../../testing.rst:180
msgid "Following Redirects"
msgstr ""

#: ../../testing.rst:182
msgid ""
"By default, the client does not make additional requests if the response "
"is a redirect. By passing ``follow_redirects=True`` to a request method, "
"the client will continue to make requests until a non-redirect response "
"is returned."
msgstr ""

#: ../../testing.rst:187
msgid ""
":attr:`TestResponse.history <werkzeug.test.TestResponse.history>` is a "
"tuple of the responses that led up to the final response. Each response "
"has a :attr:`~werkzeug.test.TestResponse.request` attribute which records"
" the request that produced that response."
msgstr ""

#: ../../testing.rst:203
msgid "Accessing and Modifying the Session"
msgstr ""

#: ../../testing.rst:205
msgid ""
"To access Flask's context variables, mainly :data:`~flask.session`, use "
"the client in a ``with`` statement. The app and request context will "
"remain active *after* making a request, until the ``with`` block ends."
msgstr ""

#: ../../testing.rst:222
msgid ""
"If you want to access or set a value in the session *before* making a "
"request, use the client's "
":meth:`~flask.testing.FlaskClient.session_transaction` method in a "
"``with`` statement. It returns a session object, and will save the "
"session once the block ends."
msgstr ""

#: ../../testing.rst:246
msgid "Running Commands with the CLI Runner"
msgstr ""

#: ../../testing.rst:248
msgid ""
"Flask provides :meth:`~flask.Flask.test_cli_runner` to create a "
":class:`~flask.testing.FlaskCliRunner`, which runs CLI commands in "
"isolation and captures the output in a :class:`~click.testing.Result` "
"object. Flask's runner extends :doc:`Click's runner <click:testing>`, see"
" those docs for additional information."
msgstr ""

#: ../../testing.rst:254
msgid ""
"Use the runner's :meth:`~flask.testing.FlaskCliRunner.invoke` method to "
"call commands in the same way they would be called with the ``flask`` "
"command from the command line."
msgstr ""

#: ../../testing.rst:276
msgid "Tests that depend on an Active Context"
msgstr ""

#: ../../testing.rst:278
msgid ""
"You may have functions that are called from views or commands, that "
"expect an active :doc:`application context </appcontext>` or "
":doc:`request context  </reqcontext>` because they access ``request``, "
"``session``, or ``current_app``. Rather than testing them by making a "
"request or invoking the command, you can create and activate a context "
"directly."
msgstr ""

#: ../../testing.rst:285
msgid ""
"Use ``with app.app_context()`` to push an application context. For "
"example, database extensions usually require an active app context to "
"make queries."
msgstr ""

#: ../../testing.rst:295
msgid ""
"Use ``with app.test_request_context()`` to push a request context. It "
"takes the same arguments as the test client's request methods."
msgstr ""

#: ../../testing.rst:309
msgid ""
"Creating a test request context doesn't run any of the Flask dispatching "
"code, so ``before_request`` functions are not called. If you need to call"
" these, usually it's better to make a full request instead. However, it's"
" possible to call them manually."
msgstr ""
