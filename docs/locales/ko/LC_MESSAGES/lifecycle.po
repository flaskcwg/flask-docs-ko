# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-20 15:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: ko <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../lifecycle.rst:2
msgid "Application Structure and Lifecycle"
msgstr ""

#: ../../lifecycle.rst:4
msgid ""
"Flask makes it pretty easy to write a web application. But there are "
"quite a few different parts to an application and to each request it "
"handles. Knowing what happens during application setup, serving, and "
"handling requests will help you know what's possible in Flask and how to "
"structure your application."
msgstr ""

#: ../../lifecycle.rst:11
msgid "Application Setup"
msgstr ""

#: ../../lifecycle.rst:13
msgid ""
"The first step in creating a Flask application is creating the "
"application object. Each Flask application is an instance of the "
":class:`.Flask` class, which collects all configuration, extensions, and "
"views."
msgstr ""

#: ../../lifecycle.rst:31
msgid ""
"This is known as the \"application setup phase\", it's the code you write"
" that's outside any view functions or other handlers. It can be split up "
"between different modules and sub-packages, but all code that you want to"
" be part of your application must be imported in order for it to be "
"registered."
msgstr ""

#: ../../lifecycle.rst:36
msgid ""
"All application setup must be completed before you start serving your "
"application and handling requests. This is because WSGI servers divide "
"work between multiple workers, or can be distributed across multiple "
"machines. If the configuration changed in one worker, there's no way for "
"Flask to ensure consistency between other workers."
msgstr ""

#: ../../lifecycle.rst:41
msgid ""
"Flask tries to help developers catch some of these setup ordering issues "
"by showing an error if setup-related methods are called after requests "
"are handled. In that case you'll see this error:"
msgstr ""

#: ../../lifecycle.rst:45
msgid ""
"The setup method 'route' can no longer be called on the application. It "
"has already handled its first request, any changes will not be applied "
"consistently. Make sure all imports, decorators, functions, etc. needed "
"to set up the application are done before running it."
msgstr ""

#: ../../lifecycle.rst:50
msgid ""
"However, it is not possible for Flask to detect all cases of out-of-order"
" setup. In general, don't do anything to modify the ``Flask`` app object "
"and ``Blueprint`` objects from within view functions that run during "
"requests. This includes:"
msgstr ""

#: ../../lifecycle.rst:54
msgid ""
"Adding routes, view functions, and other request handlers with "
"``@app.route``, ``@app.errorhandler``, ``@app.before_request``, etc."
msgstr ""

#: ../../lifecycle.rst:56
msgid "Registering blueprints."
msgstr ""

#: ../../lifecycle.rst:57
msgid "Loading configuration with ``app.config``."
msgstr ""

#: ../../lifecycle.rst:58
msgid "Setting up the Jinja template environment with ``app.jinja_env``."
msgstr ""

#: ../../lifecycle.rst:59
msgid "Setting a session interface, instead of the default itsdangerous cookie."
msgstr ""

#: ../../lifecycle.rst:60
msgid ""
"Setting a JSON provider with ``app.json``, instead of the default "
"provider."
msgstr ""

#: ../../lifecycle.rst:61
msgid "Creating and initializing Flask extensions."
msgstr ""

#: ../../lifecycle.rst:65
msgid "Serving the Application"
msgstr ""

#: ../../lifecycle.rst:67
msgid ""
"Flask is a WSGI application framework. The other half of WSGI is the WSGI"
" server. During development, Flask, through Werkzeug, provides a "
"development WSGI server with the ``flask run`` CLI command. When you are "
"done with development, use a production server to serve your application,"
" see :doc:`deploying/index`."
msgstr ""

#: ../../lifecycle.rst:72
msgid ""
"Regardless of what server you're using, it will follow the :pep:`3333` "
"WSGI spec. The WSGI server will be told how to access your Flask "
"application object, which is the WSGI application. Then it will start "
"listening for HTTP requests, translate the request data into a WSGI "
"environ, and call the WSGI application with that data. The WSGI "
"application will return data that is translated into an HTTP response."
msgstr ""

#: ../../lifecycle.rst:78
msgid "Browser or other client makes HTTP request."
msgstr ""

#: ../../lifecycle.rst:79
msgid "WSGI server receives request."
msgstr ""

#: ../../lifecycle.rst:80
msgid "WSGI server converts HTTP data to WSGI ``environ`` dict."
msgstr ""

#: ../../lifecycle.rst:81
msgid "WSGI server calls WSGI application with the ``environ``."
msgstr ""

#: ../../lifecycle.rst:82
msgid ""
"Flask, the WSGI application, does all its internal processing to route "
"the request to a view function, handle errors, etc."
msgstr ""

#: ../../lifecycle.rst:84
msgid ""
"Flask translates View function return into WSGI response data, passes it "
"to WSGI server."
msgstr ""

#: ../../lifecycle.rst:86
msgid "WSGI server creates and send an HTTP response."
msgstr ""

#: ../../lifecycle.rst:87
msgid "Client receives the HTTP response."
msgstr ""

#: ../../lifecycle.rst:91
msgid "Middleware"
msgstr ""

#: ../../lifecycle.rst:93
msgid ""
"The WSGI application above is a callable that behaves in a certain way. "
"Middleware is a WSGI application that wraps another WSGI application. "
"It's a similar concept to Python decorators. The outermost middleware "
"will be called by the server. It can modify the data passed to it, then "
"call the WSGI application (or further middleware) that it wraps, and so "
"on. And it can take the return value of that call and modify it further."
msgstr ""

#: ../../lifecycle.rst:99
msgid ""
"From the WSGI server's perspective, there is one WSGI application, the "
"one it calls directly. Typically, Flask is the \"real\" application at "
"the end of the chain of middleware. But even Flask can call further WSGI "
"applications, although that's an advanced, uncommon use case."
msgstr ""

#: ../../lifecycle.rst:104
msgid ""
"A common middleware you'll see used with Flask is Werkzeug's "
":class:`~werkzeug.middleware.proxy_fix.ProxyFix`, which modifies the "
"request to look like it came directly from a client even if it passed "
"through HTTP proxies on the way. There are other middleware that can "
"handle serving static files, authentication, etc."
msgstr ""

#: ../../lifecycle.rst:111
msgid "How a Request is Handled"
msgstr ""

#: ../../lifecycle.rst:113
msgid ""
"For us, the interesting part of the steps above is when Flask gets called"
" by the WSGI server (or middleware). At that point, it will do quite a "
"lot to handle the request and generate the response. At the most basic, "
"it will match the URL to a view function, call the view function, and "
"pass the return value back to the server. But there are many more parts "
"that you can use to customize its behavior."
msgstr ""

#: ../../lifecycle.rst:119
msgid "WSGI server calls the Flask object, which calls :meth:`.Flask.wsgi_app`."
msgstr ""

#: ../../lifecycle.rst:120
msgid ""
"A :class:`.RequestContext` object is created. This converts the WSGI "
"``environ`` dict into a :class:`.Request` object. It also creates an "
":class:`AppContext` object."
msgstr ""

#: ../../lifecycle.rst:122
msgid ""
"The :doc:`app context <appcontext>` is pushed, which makes "
":data:`.current_app` and :data:`.g` available."
msgstr ""

#: ../../lifecycle.rst:124
msgid "The :data:`.appcontext_pushed` signal is sent."
msgstr ""

#: ../../lifecycle.rst:125
msgid ""
"The :doc:`request context <reqcontext>` is pushed, which makes "
":attr:`.request` and :class:`.session` available."
msgstr ""

#: ../../lifecycle.rst:127
msgid ""
"The session is opened, loading any existing session data using the app's "
":attr:`~.Flask.session_interface`, an instance of "
":class:`.SessionInterface`."
msgstr ""

#: ../../lifecycle.rst:129
msgid ""
"The URL is matched against the URL rules registered with the "
":meth:`~.Flask.route` decorator during application setup. If there is no "
"match, the error - usually a 404, 405, or redirect - is stored to be "
"handled later."
msgstr ""

#: ../../lifecycle.rst:132
msgid "The :data:`.request_started` signal is sent."
msgstr ""

#: ../../lifecycle.rst:133
msgid "Any :meth:`~.Flask.url_value_preprocessor` decorated functions are called."
msgstr ""

#: ../../lifecycle.rst:134
msgid ""
"Any :meth:`~.Flask.before_request` decorated functions are called. If any"
" of these function returns a value it is treated as the response "
"immediately."
msgstr ""

#: ../../lifecycle.rst:136
msgid "If the URL didn't match a route a few steps ago, that error is raised now."
msgstr ""

#: ../../lifecycle.rst:137
msgid ""
"The :meth:`~.Flask.route` decorated view function associated with the "
"matched URL is called and returns a value to be used as the response."
msgstr ""

#: ../../lifecycle.rst:139
msgid ""
"If any step so far raised an exception, and there is an "
":meth:`~.Flask.errorhandler` decorated function that matches the "
"exception class or HTTP error code, it is called to handle the error and "
"return a response."
msgstr ""

#: ../../lifecycle.rst:142
msgid ""
"Whatever returned a response value - a before request function, the view,"
" or an error handler, that value is converted to a :class:`.Response` "
"object."
msgstr ""

#: ../../lifecycle.rst:144
msgid ""
"Any :func:`~.after_this_request` decorated functions are called, then "
"cleared."
msgstr ""

#: ../../lifecycle.rst:145
msgid ""
"Any :meth:`~.Flask.after_request` decorated functions are called, which "
"can modify the response object."
msgstr ""

#: ../../lifecycle.rst:147
msgid ""
"The session is saved, persisting any modified session data using the "
"app's :attr:`~.Flask.session_interface`."
msgstr ""

#: ../../lifecycle.rst:149
msgid "The :data:`.request_finished` signal is sent."
msgstr ""

#: ../../lifecycle.rst:150
msgid ""
"If any step so far raised an exception, and it was not handled by an "
"error handler function, it is handled now. HTTP exceptions are treated as"
" responses with their corresponding status code, other exceptions are "
"converted to a generic 500 response. The :data:`.got_request_exception` "
"signal is sent."
msgstr ""

#: ../../lifecycle.rst:154
msgid ""
"The response object's status, headers, and body are returned to the WSGI "
"server."
msgstr ""

#: ../../lifecycle.rst:155
msgid "Any :meth:`~.Flask.teardown_request` decorated functions are called."
msgstr ""

#: ../../lifecycle.rst:156
msgid "The :data:`.request_tearing_down` signal is sent."
msgstr ""

#: ../../lifecycle.rst:157
msgid ""
"The request context is popped, :attr:`.request` and :class:`.session` are"
" no longer available."
msgstr ""

#: ../../lifecycle.rst:159
msgid "Any :meth:`~.Flask.teardown_appcontext` decorated functions are called."
msgstr ""

#: ../../lifecycle.rst:160
msgid "The :data:`.appcontext_tearing_down` signal is sent."
msgstr ""

#: ../../lifecycle.rst:161
msgid ""
"The app context is popped, :data:`.current_app` and :data:`.g` are no "
"longer available."
msgstr ""

#: ../../lifecycle.rst:163
msgid "The :data:`.appcontext_popped` signal is sent."
msgstr ""

#: ../../lifecycle.rst:165
msgid ""
"There are even more decorators and customization points than this, but "
"that aren't part of every request lifecycle. They're more specific to "
"certain things you might use during a request, such as templates, "
"building URLs, or handling JSON data. See the rest of this documentation,"
" as well as the :doc:`api` to explore further."
msgstr ""
